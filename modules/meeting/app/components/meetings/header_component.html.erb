<%=
  component_wrapper do
    case @state
    when :show
      flex_layout do |show_header|
        show_header.with_row do
          flex_layout(justify_content: :space_between, align_items: :center) do |title|
            title.with_column(flex: 1) do
              render(Primer::Beta::Heading.new(tag: :h1)) { @meeting.title }
            end

            title.with_column do
              render(Primer::Alpha::ActionMenu.new) do |menu|
                menu.with_show_button(icon: "kebab-horizontal", 'aria-label': t("label_meeting_actions"), test_selector: 'op-meetings-header-action-trigger')

                menu.with_item(label: t("label_meeting_edit_title"),
                               href: edit_meeting_path(@meeting),
                               content_arguments: {
                                 data: { 'turbo-stream': true }
                               }) do |item|
                  item.with_leading_visual_icon(icon: :pencil)
                end if @meeting.editable?

                menu.with_item(label: t(:label_icalendar_download),
                               href: download_ics_meeting_path(@meeting)) do |item|
                  item.with_leading_visual_icon(icon: :download)
                end

                menu.with_item(label: t("label_meeting_delete"),
                               scheme: :danger,
                               href: meeting_path(@meeting),
                               form_arguments: {
                                 method: :delete, data: { confirm: t("text_are_you_sure"), turbo: 'false' }
                               }) do |item|
                  item.with_leading_visual_icon(icon: :trash)
                end if delete_enabled?
              end
            end
          end
        end

        show_header.with_row do
          flex_layout(align_items: :center) do |meta_info|
            meta_info.with_column(mr: 1) do
              render(Primer::Beta::Text.new(font_size: :small, color: :subtle)) { t("label_meeting_created_by") }
            end

            meta_info.with_column(mr: 1) do
              render_author_link
            end

            meta_info.with_column(mr: 1) do
              render(Primer::Beta::Text.new(font_size: :small, color: :subtle)) { t("label_meeting_last_updated") }
            end

            meta_info.with_column do
              render(Primer::Beta::RelativeTime.new(font_size: :small, color: :subtle, datetime: last_updated_at))
            end
          end
        end
      end

    when :edit
      if @meeting.editable?
        flex_layout do |edit_header|
          edit_header.with_row(mb: 2) do
            primer_form_with(
              model: @meeting,
              method: :put,
              url: update_title_meeting_path(@meeting)
            ) do |f|
              flex_layout do |editable_title_form|
                editable_title_form.with_column(flex: 1, mr: 2) do
                  render(Meeting::Title.new(f))
                end

                editable_title_form.with_column(mr: 2) do
                  render(Meeting::Submit.new(f))
                end

                editable_title_form.with_column do
                  render(Primer::Beta::Button.new(
                    scheme: :secondary,
                    tag: :a,
                    href: cancel_edit_meeting_path(@meeting),
                    data: { 'turbo-stream': true }
                  )) do |_c|
                    t("button_cancel")
                  end
                end
              end
            end
          end

          edit_header.with_row do
            flex_layout(align_items: :center) do |meta_info|
              meta_info.with_column(mr: 1) do
                render(Primer::Beta::Text.new(font_size: :small, color: :subtle)) { t("label_meeting_created_by") }
              end

              meta_info.with_column(mr: 1) do
                render_author_link
              end

              meta_info.with_column(mr: 1) do
                render(Primer::Beta::Text.new(font_size: :small, color: :subtle)) { t("label_meeting_last_updated") }
              end

              meta_info.with_column do
                render(Primer::Beta::RelativeTime.new(font_size: :small, color: :subtle, datetime: last_updated_at))
              end
            end
          end
        end
      end
    end
  end
%>
