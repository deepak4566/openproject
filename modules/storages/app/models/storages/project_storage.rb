#-- encoding: UTF-8

#-- copyright
# OpenProject is an open source project management software.
# Copyright (C) 2012-2022 the OpenProject GmbH
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License version 3.
#
# OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
# Copyright (C) 2006-2013 Jean-Philippe Lang
# Copyright (C) 2010-2013 the ChiliProject Team
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# See COPYRIGHT and LICENSE files for more details.
#++

# A ProjectStorage is a kind of relation between a Storage and
# a Project in order to enable or disable a Storage for a specific
# WorkPackages in the project.
# See also: file_link.rb and storage.rb
class Storages::ProjectStorage < ApplicationRecord
  # ToDo: Why is this necessary? Because otherwise it would be project_storages?
  self.table_name = 'projects_storages'

  # ProjectStorage sits between Project and Storage.
  belongs_to :project
  belongs_to :storage, class_name: 'Storages::Storage'
  belongs_to :creator, class_name: 'User'

  # There should be only one ProjectStorage per project and storage.
  validates :project, uniqueness: { scope: :storage }

  # Use a callback to delete dependent FileLinks.
  before_destroy :delete_associated_file_links

  private

  # Delete FileLinks with the same Storage as the ProjectStorage.
  # Also, they are attached to WorkPackages via the Project.
  def delete_associated_file_links
    # work_packages is an ActiveRecord::Relation, not an array of objects!
    work_packages = WorkPackage.where(project_id: project_id)
    file_links = Storages::FileLink.where(storage_id: storage_id, container: work_packages)
    # use file_links.to_sql to check the SQL generated by the lines above.
    # It uses a fast SQL "container_id in (select * from work_packages...)", so the
    # delete_all below is executed using a single query.
    # Reference: https://api.rubyonrails.org/classes/ActiveRecord/Relation.html
    file_links.delete_all
  end
end
