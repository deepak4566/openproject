module Report::QueryUtils
  Infinity: untyped

  include Engine

  attr_writer engine: untyped

  include Costs::NumberHelper

  #
  # Graceful string quoting.
  #
  # @param [Object] str String to quote
  # @return [Object] Quoted version
  def quote_string: (untyped str) -> untyped

  def current_language: () -> untyped

  #
  # Creates a SQL fragment representing a collection/array.
  #
  # @see quote_string
  # @param [#flatten] *values Ruby collection
  # @return [String] SQL collection
  def collection: (*untyped values) -> ("" | ::String)

  def split_with_safe_return: (untyped str) -> ("" | untyped)

  #
  # Graceful, internationalized quoted string.
  #
  # @see quote_string
  # @param [Object] str String to quote/translate
  # @return [Object] Quoted, translated version
  def quoted_label: (untyped ident) -> ::String

  def quoted_date: (untyped date) -> untyped

  #
  # SQL date quoting.
  # @param [Date,Time] date Date to quote.
  # @return [String] Quoted date.
  def quote_date: (untyped date) -> ::String

  #
  # Generate a table name for any object.
  #
  # @example Table names
  #   table_name_for Issue    # => 'issues'
  #   table_name_for :issue   # => 'issues'
  #   table_name_for "issue"  # => 'issues'
  #   table_name_for "issues" # => 'issues
  #
  # @param [#table_name, #to_s] object Object you need the table name for.
  # @return [String] The table name.
  def table_name_for: (untyped object) -> untyped

  #
  # Generate a field name
  #
  # @example Field names
  #   field_name_for nil                            # => 'NULL'
  #   field_name_for 'foo'                          # => 'foo'
  #   field_name_for [Issue, 'project_id']          # => 'issues.project_id'
  #   field_name_for [:issue, 'project_id']         # => 'issues.project_id'
  #
  # @param [Array, Object] arg Object to generate field name for.
  # @param [Object, optional] default_table Table name to use if no table name is given.
  # @return [String] Field name.
  def field_name_for: (untyped arg) -> ("NULL" | untyped | ::String)

  #
  # Sanitizes sql condition
  #
  # @see ActiveRecord::Base#sanitize_sql_for_conditions
  # @param [Object] statement Not sanitized statement.
  # @return [String] Sanitized statement.
  def sanitize_sql_for_conditions: (untyped statement) -> untyped

  #
  # Generates a SQL case statement.
  #
  # @example
  #   switch "#{table}.overridden_costs IS NULL" => [model, :costs], :else => [model, :overridden_costs]
  #
  # @param [Hash] options Condition => Result.
  # @return [String] Case statement.
  def switch: (untyped options) -> ::String

  #
  # Converts value with a given behavior, but treats nil differently.
  # Params
  #  - value: the value to convert
  #  - block (optional) - defines how to convert values which are not nil
  #               if no block is given, values stay untouched
  def convert_unless_nil: (untyped value) { (untyped) -> untyped } -> untyped

  def map_field: (untyped key, untyped value) -> untyped

  def adapter_name: () -> untyped

  def cache: () -> untyped

  def compare: (untyped first, untyped second) -> untyped

  def typed: (untyped type, untyped value, ?bool escape) -> ::String

  def iso_year_week: (untyped field_name) -> ::String

  def self.cache: () -> untyped

  def self.included: (untyped klass) -> untyped
end
