class CostReportsController < ApplicationController
  include Layout

  attr_accessor report_engine: untyped

  attr_accessor cost_types: untyped

  attr_accessor unit_id: untyped

  attr_accessor cost_type: untyped

  include ReportingHelper

  def engine: () -> untyped

  # Checks if custom fields have been updated, added or removed since we
  # last saw them, to rebuild the filters and group bys.
  # Called once per request.
  def check_cache: () -> untyped

  def index: () -> untyped

  #
  # Render the report. Renders either the complete index or the table only
  def table: () -> (untyped | nil)

  def menu_item_to_highlight_on_index: () -> (:costs | :cost_reports_global)

  #
  # Create a new saved query. Returns the redirect url to an XHR or redirects directly
  def create: () -> untyped

  #
  # Show a saved record, if found. Raises RecordNotFound if the specified query
  # at :id does not exist
  def show: () -> untyped

  #
  # Delete a saved record, if found. Redirects to index on success, raises a
  # RecordNotFound if the query at :id does not exist
  def destroy: () -> untyped

  #
  # Update a record with new query parameters and save it. Redirects to the
  # specified record or renders the updated table on XHR
  def update: () -> untyped

  #
  # Rename a record and update its publicity. Redirects to the updated record or
  # renders the updated name on XHR
  def rename: () -> untyped

  def drill_down: () -> untyped

  # renders option tags for each available value for a single filter
  def available_values: () -> (nil | untyped)

  #
  # Determines if the request sets a unit type
  def set_unit?: () -> untyped

  #
  # @Override
  # We cannot show a progressbar in Redmine, due to Prototype being less than 1.7
  def no_progress?: () -> true

  #
  # Set a default query to cut down initial load time
  def default_filter_parameters: () -> untyped

  #
  # Get the filter params with an optional project context
  def filter_params: () -> untyped

  #
  # Return the active group bys
  def group_params: () -> untyped

  #
  # Clear the query if the project context changed
  def update_project_context!: (untyped filters) -> (nil | untyped)

  def set_project_filter: (untyped filters, untyped project_id) -> untyped

  def set_me_filter: (untyped filters) -> untyped

  #
  # Set a default query to cut down initial load time
  def default_group_parameters: () -> untyped

  #
  # Determine active cost types, the currently selected unit and corresponding cost type
  def set_cost_types: () -> untyped

  # Determine the currently active unit from the parameters or session
  #   sets the @unit_id -> this is used in the index for determining the active unit tab
  def set_unit: () -> untyped

  # Determine the active cost type, if it is not labor or money, and add a hidden filter to the query
  #   sets the @cost_type -> this is used to select the proper units for display
  def set_cost_type: () -> (nil | untyped)

  #   set the @cost_types -> this is used to determine which tabs to display
  def set_active_cost_types: () -> (untyped | nil)

  def load_all: () -> untyped

  # @Override
  def determine_engine: () -> untyped

  # N.B.: Users with save_cost_reports permission implicitly have
  # save_private_cost_reports permission as well
  #
  # @Override
  def allowed_to?: (untyped action, untyped report, ?untyped user) -> (true | false | untyped)

  def display_report_list: () -> untyped

  private

  def find_optional_user: () -> untyped

  def get_filter_class: (untyped name) -> untyped

  #
  # Determine the available values for the specified filter and return them as
  # json, if that was requested. This will be executed INSTEAD of the actual action
  def possibly_only_narrow_values: () -> (untyped | nil)

  #
  # Determines if the request contains filters to set
  # FIXME: rename to set_query?
  def set_filter?: () -> untyped

  #
  # Extract active filters from the http params
  def http_filter_parameters: () -> untyped

  #
  # Extract active group bys from the http params
  def http_group_parameters: () -> { rows: untyped, columns: untyped }

  #
  # Determines if the query settings should be reset
  def force_default?: () -> untyped

  #
  # Prepare the query from the request
  def prepare_query: () -> untyped

  #
  # Determine the query settings the current request and save it to
  # the session.
  def determine_settings: () -> untyped

  #
  # Build the query from the passed session hash
  def build_query: (untyped filters, ?::Hash[untyped, untyped] groups) -> untyped

  #
  # Store query in the session
  def store_query: (untyped _query) -> untyped

  #
  # Override in subclass if user key
  def user_key: () -> "user_id"

  #
  # Override in subclass if you like
  def is_public_sql: (?bool val) -> ::String

  def make_query_public?: () -> untyped

  #
  # Find a report if :id was passed as parameter.
  # Raises RecordNotFound if an invalid :id was passed.
  #
  # @param query An optional query added to the disjunction qualifiying reports to be returned.
  def find_optional_report: (?::String query) -> untyped
end
