name: "Test suite"
# https://securitylab.github.com/research/github-actions-preventing-pwn-requests
on:
  push:
    branches:
      - dev
      - release/*
    paths-ignore:
      - 'docs/**'
      - 'help/**'
  pull_request:
    types: [opened, reopened, synchronize]
    paths-ignore:
      - 'docs/**'
      - 'help/**'
      - 'packaging/**'
      - '.pkgr.yml'

permissions:
  contents: read

jobs:
  all:
    name: Units + Features
    if: github.repository == 'opf/openproject'
    runs-on: [self-hosted, aws, ubuntu22, x64, 2XL]
    timeout-minutes: 40
    env:
      DOCKER_BUILDKIT: 1
      LOCAL_DEV_CHECK: 1
      CI_RETRY_COUNT: 3
      CAPYBARA_DOWNLOADED_FILE_DIR: /tmp/ci/downloads
      CAPYBARA_AWS_ACCESS_KEY_ID: "${{ secrets.CAPYBARA_AWS_ACCESS_KEY_ID }}"
      CAPYBARA_AWS_SECRET_ACCESS_KEY: "${{ secrets.CAPYBARA_AWS_SECRET_ACCESS_KEY }}"
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Cache DOCKER
      id: cache_docker
      uses: actions/cache@v3
      with:
        path: cache/docker
        key: ${{ runner.os }}-docker-ci-${{ hashFiles('docker-compose.ci.yml', 'docker/ci/*', '.ruby-version', 'bin/ci') }}
        # Note: no restore keys since whenever the above files change, we want to rebuild the full image from scratch
    - name: Restore CI image from cache
      if: steps.cache_docker.outputs.cache-hit == 'true'
      run: docker load -i cache/docker/image.tar
    - name: Cache GEM
      uses: actions/cache@v3
      with:
        path: cache/bundle
        key: gem-${{ hashFiles('Gemfile.lock') }}
        restore-keys: |
          gem-
    - name: Cache NPM
      uses: actions/cache@v3
      with:
        path: cache/npm
        key: npm-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          npm-
    - name: Cache ANGULAR
      uses: actions/cache@v3
      with:
        path: cache/angular
        key: angular-${{ hashFiles('frontend/package-lock.json') }}
        restore-keys: |
          angular-
    - name: Cache TEST RUNTIME
      uses: actions/cache@v3
      with:
        path: cache/runtime-logs
        key: runtime-logs-${{ github.head_ref || github.ref }}-${{ github.ref }}
        restore-keys: |
          runtime-logs-${{ github.head_ref || github.ref }}-
          runtime-logs-
    - name: Build
      run: bin/ci setup-tests
    - name: APIv3 specification (OpenAPI 3.0)
      run: bin/ci ./script/api/validate_spec
    - name: Unit tests
      run: bin/ci run-units
    - name: Feature tests
      run: bin/ci run-features
    - name: Save CI image to cache
      if: steps.cache_docker.outputs.cache-hit != 'true'
      run: mkdir -p cache/docker && docker save openproject/ci:v1 -o cache/docker/image.tar
    - name: Cleanup
      if: ${{ always() }}
      run: |
        ls -al cache/runtime-logs || true
        ls -al cache/ || true
        du -sh cache/* || true

# github.head_ref is only availabe in PR context and if it is absent then github.run_id
# is used . And github.run_id is unique for each workflow run. So, this option makes
# sure that there is only one build running for a pull request and the build is attached
# to the last commit of the PR.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
