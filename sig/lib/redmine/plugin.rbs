module Redmine
  class PluginError < StandardError
    attr_reader plugin_id: untyped

    def initialize: (?untyped? plug_id) -> void
  end

  class PluginNotFound < PluginError
    def to_s: () -> ::String
  end

  class PluginCircularDependency < PluginError
    def to_s: () -> ::String
  end

  class PluginRequirementError < PluginError
  end

  # Base class for Redmine plugins.
  # Plugins are registered using the <tt>register</tt> class method that acts as the public constructor.
  #
  #   Redmine::Plugin.register :example do
  #     name 'Example plugin'
  #     author 'John Smith'
  #     description 'This is an example plugin for Redmine'
  #     version '0.0.1'
  #     settings default: {'foo'=>'bar'}, partial: 'settings/settings'
  #   end
  #
  # === Plugin attributes
  #
  # +settings+ is an optional attribute that let the plugin be configurable.
  # It must be a hash with the following keys:
  # * <tt>:default</tt>: default value for the plugin settings
  # * <tt>:partial</tt>: path of the configuration partial view, relative to the plugin <tt>app/views</tt> directory
  # Example:
  #   settings default: {'foo'=>'bar'}, partial: 'settings/settings'
  # In this example, the settings partial will be found here in the plugin directory: <tt>app/views/settings/_settings.rhtml</tt>.
  #
  # When rendered, the plugin settings value is available as the local variable +settings+
  class Plugin
    attr_reader self.registered_plugins: untyped

    attr_reader self.deferred_plugins: untyped

    def self.def_field: (*untyped names) -> untyped

    attr_reader id: untyped

    # Plugin constructor
    def self.register: (untyped id) { () -> untyped } -> untyped

    def name: (*untyped args) -> untyped

    # returns an array of all dependencies we know of for plugin id
    # (might not be complete at all times!)
    def self.dependencies_for: (untyped id) -> untyped

    # Returns an array of all registered plugins
    def self.all: () -> untyped

    # Finds a plugin by its id
    # Returns a PluginNotFound exception if the plugin doesn't exist
    def self.find: (untyped id) -> untyped

    # Clears the registered plugins hash
    # It doesn't unload installed plugins
    def self.clear: () -> untyped

    # Checks if a plugin is installed
    #
    # @param [String] id name of the plugin
    def self.installed?: (untyped id) -> untyped

    def initialize: (untyped id) -> void

    def <=>: (untyped other) -> untyped

    def requires_openproject: (*untyped args) -> true

    # Raises a PluginRequirementError exception if the requirement is not met
    #
    # Examples
    #   # Requires a plugin named :foo version 0.7.3 or higher
    #   requires_redmine_plugin :foo, version_or_higher: '0.7.3'
    #   requires_redmine_plugin :foo, '0.7.3'
    #
    #   # Requires a specific version of a Redmine plugin
    #   requires_redmine_plugin :foo, version: '0.7.3'              # 0.7.3 only
    #   requires_redmine_plugin :foo, version: ['0.7.3', '0.8.0']   # 0.7.3 or 0.8.0
    def requires_redmine_plugin: (untyped plugin_name, untyped arg) -> true

    # Adds an item to the given +menu+.
    # The +id+ parameter (equals to the project id) is automatically added to the url.
    #   menu :project_menu, :plugin_example, { controller: '/example', action: 'say_hello' }, caption: 'Sample'
    #
    # +name+ parameter can be: :top_menu, :account_menu, :application_menu or :project_menu
    #
    def menu: (untyped menu_name, untyped item, untyped url, ?::Hash[untyped, untyped] options) -> untyped

    alias add_menu_item menu

    def configure_menu: (untyped menu_name) { () -> untyped } -> untyped

    # Removes +item+ from the given +menu+.
    def delete_menu_item: (untyped menu_name, untyped item) -> untyped

    # Allows to hide an existing +item+ in a menu.
    #
    # +hide_if+ parameter can be a lambda accepting a project, the item will only be hidden if
    #   the condition evaluates to true.
    def hide_menu_item: (untyped menu_name, untyped item, ?hide_if: untyped) -> untyped

    def rename_menu_item: (untyped menu_name, untyped item, untyped options) -> untyped

    # Defines a permission called +name+ for the given +actions+.
    #
    # The +actions+ argument is a hash with controllers as keys and actions as values (a single value or an array):
    #   permission :destroy_contacts, { contacts: :destroy }
    #   permission :view_contacts, { contacts: [:index, :show] }
    #
    # The +options+ argument can be used to make the permission public (implicitly given to any user)
    # or to restrict users the permission can be given to.
    #
    # Examples
    #   # A permission that is implicitly given to any user
    #   # This permission won't appear on the Roles & Permissions setup screen
    #   permission :say_hello, { example: :say_hello }, public: true
    #
    #   # A permission that can be given to any user
    #   permission :say_hello, { example: :say_hello }
    #
    #   # A permission that can be given to registered users only
    #   permission :say_hello, { example: :say_hello }, require: :loggedin
    #
    #   # A permission that can be given to project members only
    #   permission :say_hello, { example: :say_hello }, require: :member
    def permission: (untyped name, untyped actions, ?::Hash[untyped, untyped] options) -> untyped

    # Defines a project module, that can be enabled/disabled for each project.
    # Permissions defined inside +block+ will be bind to the module.
    #
    #   project_module :things do
    #     permission :view_contacts, { contacts: [:list, :show] }, public: true
    #     permission :destroy_contacts, { contacts: :destroy }
    #   end
    def project_module: (untyped name, ?::Hash[untyped, untyped] options) { () -> untyped } -> untyped

    # Registers an activity provider.
    #
    # Options:
    # * <tt>:class_name</tt> - one or more model(s) that provide these events (inferred from event_type by default)
    # * <tt>:default</tt> - setting this option to false will make the events not displayed by default
    #
    # A model can provide several activity event types.
    #
    # Examples:
    #   register :news
    #   register :scrums, class_name: 'Meeting'
    #   register :issues, class_name: ['Issue', 'Journal']
    #
    # Retrieving events:
    # Associated model(s) must implement the find_events class method.
    #
    # The following call should return all the scrum events visible by current user that occurred in the 5 last days:
    #   Meeting.find_events('scrums', User.current, 5.days.ago, Date.today)
    #   Meeting.find_events('scrums', User.current, 5.days.ago, Date.today, project: foo) # events for project foo only
    #
    # Note that :view_scrums permission is required to view these events in the activity view.
    def activity_provider: (*untyped args) -> untyped

    # Registers a wiki formatter.
    #
    # Parameters:
    # * +name+ - human-readable name
    # * +formatter+ - formatter class, which should have an instance method +to_html+
    # * +helper+ - helper module, which will be included by wiki pages
    def wiki_format_provider: (untyped name, untyped formatter, untyped helper) -> untyped

    # Returns +true+ if the plugin can be configured.
    def configurable?: () -> untyped

    def mirror_assets: () -> (nil | untyped)

    # Mirrors assets from one or all plugins to public/plugin_assets
    def self.mirror_assets: (?untyped? name) -> untyped
  end
end
