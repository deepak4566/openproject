module OpenProject
  module OmniAuth
    #
    # Provides authorization mechanisms for OmniAuth-based authentication.
    module Authorization
      #
      # Checks whether the given user is authorized to login by calling
      # all registered callbacks. If all callbacks approve the user is authorized and may log in.
      def self.authorized?: (untyped auth_hash) -> untyped

      #
      # Signals that the given user has been logged in.
      #
      # Note: Only call if you know what you are doing.
      def self.after_login!: (untyped user, untyped auth_hash, ?untyped context) -> untyped

      #
      # Adds a callback to be executed before a user is logged in.
      # The given callback may reject the user to prevent authorization by
      # calling dec#reject(error) or approve by calling dec#approve.
      #
      # If not approved a user is implicitly rejected.
      #
      # @param opts [Hash] options for the callback registration
      # @option opts [Symbol] :provider Only call for given provider
      #
      # @yield [decision, user, auth_hash] Callback to be executed before the user is logged in.
      # @yieldparam [DecisionStore] dec object providing #approve and #reject
      # @yieldparam [User] user The OpenProject user to be logged in.
      # @yieldparam [AuthHash] OmniAuth authentication information including user info
      #                        and credentials.
      # @yieldreturn [Decision] A Decision indicating whether or not to authorize the user.
      def self.authorize_user: (?::Hash[untyped, untyped] opts) { () -> untyped } -> untyped

      def self.authorize_user_for_provider: (untyped provider) { () -> untyped } -> untyped

      #
      # Registers a callback on the event of a successful login.
      #
      # Called directly after logging in.
      # This usually happens when the user logged in normally or was logged in
      # automatically after on-the-fly registration via automated account activation.
      #
      # @yield [user] Callback called with the successfully logged in user.
      # @yieldparam user [User] User who has been logged in.
      # @yieldparam auth_hash [AuthHash] auth_hash OmniAuth authentication information
      #                                  including user info and credentials.
      # @yieldparam context The context from which the callback is called, e.g. a Controller.
      def self.after_login: () { () -> untyped } -> untyped

      #
      # Registers a new callback to decide whether or not a user is to be authorized.
      #
      # @param [AuthorizationCallback] Callback to be called upon user authorization.
      def self.add_authorize_user_callback: (untyped callback) -> untyped

      def self.callbacks: () -> untyped

      #
      # Registers a new callback to successful user login.
      #
      # @param [AfterLoginCallback] Callback to be called upon successful authorization.
      def self.add_after_login_callback: (untyped callback) -> untyped

      def self.after_login_callbacks: () -> untyped

      #
      # Performs user authorization.
      class AuthorizationCallback
        #
        # Given an OmniAuth auth hash this decides if a user is authorized or not.
        #
        # @param [AuthHash] auth_hash OmniAuth authentication information including user info
        #                   and credentials.
        #
        # @return [Decision] A decision indicating whether the user is authorized or not.
        def authorize: (untyped auth_hash) -> untyped
      end

      #
      # A callback triggering a given block.
      class AuthorizationBlockCallback < AuthorizationCallback
        attr_reader block: untyped

        def initialize: () { () -> untyped } -> void

        def authorize: (untyped auth_hash) -> untyped
      end

      #
      # A callback for reacting to a user being logged in.
      class AfterLoginCallback
        #
        # Is called after a user has been logged in successfully.
        #
        # @param [User] User who has been logged in.
        # @param [Omniauth::AuthHash] Omniauth authentication info including credentials.
        def after_login: (untyped user, untyped auth_hash, untyped context) -> untyped
      end

      #
      # A after_login callback triggering a given block.
      class AfterLoginBlockCallback < AfterLoginCallback
        attr_reader block: untyped

        def initialize: () { () -> untyped } -> void

        def after_login: (untyped user, untyped auth_hash, untyped context) -> untyped
      end

      #
      # Abstract base class for an authorization decision.
      # Any subclass must either override #approve? or #reject?
      # the both of which are defined in terms of each other.
      class Decision
        def approve?: () -> untyped

        def reject?: () -> untyped

        def self.approve: () -> untyped

        def self.reject: (untyped error_message) -> untyped
      end

      #
      # Indicates a rejected authorization attempt.
      class Rejection < Decision
        attr_reader message: untyped

        def initialize: (untyped message) -> void

        def reject?: () -> true
      end

      #
      # Indicates an approved authorization.
      class Approval < Decision
        def approve?: () -> true
      end

      #
      # Stores a decision.
      class DecisionStore
        attr_accessor decision: untyped

        def approve: () -> untyped

        def reject: (untyped error_message) -> untyped
      end

      #
      # Passes each element to the given block and returns the
      # result of the block as soon as it's truthy.
      def find_map: () { () -> untyped } -> (untyped | nil)
    end
  end
end
