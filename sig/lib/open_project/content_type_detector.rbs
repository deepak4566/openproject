#
# The content-type detection strategy is as follows:
#
# 1. Blank/Empty files: If there's no filename or the file is empty,
#    provide a sensible default (application/binary or inode/x-empty)
#
# 2. Calculated match: Return the first result that is found by both the
#    `file` command and MIME::Types.
#
# 3. Standard types: Return the first standard (without an x- prefix) entry
#    in MIME::Types
#
# 4. Experimental types: If there were no standard types in MIME::Types
#    list, try to return the first experimental one
#
# 5. Raw `file` command: Just use the output of the `file` command raw, or
#    a sensible default. This is cached from Step 2.
#
module OpenProject
  class ContentTypeDetector
    # application/binary is more secure than application/octet-stream
    # see: http://security.stackexchange.com/q/12896
    SENSIBLE_DEFAULT: "application/binary"

    EMPTY_TYPE: "inode/x-empty"

    def initialize: (untyped filename) -> void

    # Returns a String describing the file's content type
    def detect: () -> untyped

    private

    def empty_file?: () -> untyped

    alias empty? empty_file?

    def blank_name?: () -> untyped

    def possible_types: () -> untyped

    def calculated_type_matches: () -> untyped

    def type_from_file_command: () -> untyped
  end
end
