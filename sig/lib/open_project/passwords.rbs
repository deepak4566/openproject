module OpenProject
  #
  # Evaluate and generate passwords
  #
  module Passwords
    #
    # Evaluates passwords and generates error messages for the evaluated
    # passwords based on password complexity settings like minimum password
    # length and other complexity rules.
    #
    module Evaluator
      RULES: ::Hash[::String, ::Regexp]

      # Check whether password conforms to password complexity settings.
      # Checks complexity rules and password length.
      def self.conforming?: (untyped password) -> untyped

      # Returns corresponding error messages if +password+ doesn't conform to
      # password complexity settings.
      def self.errors_for_password: (untyped password) -> untyped

      # Returns the names of known rules, e.g. ['uppercase'].
      def self.known_rules: () -> untyped

      # Returns the names of rules activated in settings.
      def self.active_rules: () -> untyped

      # Checks whether password adheres to complexity rules.
      # Does not check length.
      def self.password_conforms_to_rules: (untyped password) -> untyped

      # Checks whether password matches minimum length specified in settings.
      def self.password_long_enough: (untyped password) -> untyped

      # Returns the minimum number of rules passwords must adhere to
      # to be accepted, as specified in settings and checked to be within
      # reasonable bounds (>= 0, <= number of active rules).
      def self.min_adhered_rules: () -> untyped

      # Returns the minimum password length as specified in settings.
      def self.min_length: () -> untyped

      # Returns a text describing the active password complexity rules,
      # the minimum number of rules to adhere to and the total number of rules.
      def self.rules_description: () -> ("" | untyped)

      # Returns a text describing the minimum length of a password.
      def self.min_length_description: () -> untyped

      # Returns the number of active rules password adheres to.
      def self.size_active_rules_adhered_by: (untyped password) -> untyped

      # Return a collection with active rules
      def self.active_rules_list: () -> untyped

      def self.rules_description_locale: (untyped rules) -> untyped
    end

    #
    # Generates random passwords that conform to password complexity settings
    #
    module Generator
      RANDOM_PASSWORD_MIN_LENGTH: 15

      # Generates a random password with a minimum length of 15 or the minimum
      # password length, whichever is higher.
      # The generated password conforms to the active password rules.
      def self.random_password: () -> untyped
    end
  end
end
