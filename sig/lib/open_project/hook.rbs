module OpenProject
  module Hook
    # Adds a listener class.
    # Automatically called when a class inherits from OpenProject::Hook::Listener.
    def self.add_listener: (untyped klass) -> untyped

    # Returns all the listener instances.
    def self.listeners: () -> untyped

    def self.listener_classes: () -> untyped

    # Returns the listener instances for the given hook.
    def self.hook_listeners: (untyped hook) -> untyped

    # Clears all the listeners.
    def self.clear_listeners: () -> untyped

    # Clears all the listeners instances.
    def self.clear_listeners_instances: () -> untyped

    # Calls a hook.
    # Returns the listeners response.
    def self.call_hook: (untyped hook, ?::Hash[untyped, untyped] context) -> untyped

    # Base class for hook listeners.
    class Listener
      include Singleton

      include Redmine::I18n

      # Registers the listener
      def self.inherited: (untyped child) -> untyped
    end

    # Listener class used for views hooks.
    # Listeners that inherit this class will include various helpers by default.
    class ViewListener < Listener
      include ERB::Util

      include ActionView::Helpers::TagHelper

      include ActionView::Helpers::FormHelper

      include ActionView::Helpers::FormTagHelper

      include ActionView::Helpers::FormOptionsHelper

      include ActionView::Helpers::JavaScriptHelper

      include ActionView::Helpers::NumberHelper

      include ActionView::Helpers::UrlHelper

      include Sprockets::Rails::Helper

      include ActionView::Helpers::TextHelper

      include ApplicationHelper

      # Default to creating links using only the path.  Subclasses can
      # change this default as needed
      def self.default_url_options: () -> { host: untyped, only_path: true, script_name: untyped }

      # Helper method to directly render a partial using the context:
      #
      #   class MyHook < OpenProject::Hook::ViewListener
      #     render_on :view_issues_show_details_bottom, partial: "show_more_data"
      #   end
      #
      def self.render_on: (untyped hook, ?::Hash[untyped, untyped] options) -> untyped

      def controller: () -> nil

      def config: () -> untyped
    end
  end
end
