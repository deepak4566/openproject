module OpenProject
  module ChangedBySystem
    def changed_by_system: (?untyped? attributes) -> untyped

    # Wrapper to track changes carried out in the context of the system.
    #
    #   model.change_by_system do
    #     model.attribute = 1
    #   end
    #
    # Attribute changes carried out within such a scope will not count to be changed
    # by the user. It can therefore be used to set calculated or default values.
    #
    # This should never be used with user provided values.
    #
    # No only the attribute is tracked but also the values. So it is safe to e.g. first
    # set a default value, and then mass assign attributes. If the default value is overwritten
    # by the mass assignment the change in value will give that away.
    def change_by_system: () { () -> untyped } -> untyped

    # Similar to #changed from ActiveRecord this returns all attributes that are
    # currently changed. But it will only include those attributes, that have not
    # been changed within a #change_by_system block and as such are caused by user input.
    def changed_by_user: () -> untyped

    private

    def non_no_op_changes: () -> untyped

    def changes_compared_to: (untyped prior_changes) -> untyped

    # Construct the custom model changes method, which is based on the `ActiveRecord::Base#changes`.
    # Includes the changes of the custom fields, if the object extends the acts_as_customizable
    # (Redmine::Acts::Customizable::InstanceMethods) plugin.
    # Ideally we would override the `ActiveRecord::Base#changes`, but adding the custom field attributes
    # to the `ActiveRecord::Base#changes` may produce some unwanted side effects.
    def model_changes: () -> untyped
  end
end
