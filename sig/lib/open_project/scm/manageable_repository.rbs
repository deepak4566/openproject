module OpenProject
  module SCM
    module ManageableRepository
      def self.included: (untyped base) -> untyped

      module ClassMethods
        #
        # We let SCM vendor implementation define their own
        # types (e.g., for differences in the management of
        # local vs. remote repositories).
        #
        # But if they are manageable by OpenProject, they must
        # expose this type through +available_types+.
        def managed_type: () -> :managed

        #
        # Reads from configuration whether new repositories of this kind
        # may be managed from OpenProject.
        def manageable?: () -> untyped

        #
        # Returns the managed root for this repository vendor
        def managed_root: () -> untyped

        #
        # Returns the managed remote for this repository vendor,
        # if any. Use +manages_remote?+ to determine whether the configuration
        # specifies local or remote managed repositories.
        def managed_remote: () -> untyped

        #
        # Returns whether the managed root is a remote URL to post to
        def manages_remote?: () -> untyped
      end

      def manageable?: () -> untyped

      #
      # Determines whether this repository IS currently managed
      # by openproject
      def managed?: () -> untyped

      #
      # Allows descendants to perform actions
      # with the given repository after the managed
      # repository has been written to file system.
      def managed_repo_created: (untyped _args) -> nil

      #
      # Returns the absolute path to the repository
      # under the +managed_root+ path defined in the configuration
      # of this adapter.
      # Used only in the creation of a repository, at a later point
      # in time, it is referred to in the root_url
      def managed_repository_path: () -> untyped

      #
      # Returns the access url to the repository
      # May be overridden by descendants
      # Used only in the creation of a repository, at a later point
      # in time, it is referred to in the url
      def managed_repository_url: () -> ::String

      #
      # Repository relative path from scm managed root.
      # Will be overridden by including models to, e.g.,
      # append '.git' to that path.
      def repository_identifier: () -> untyped
    end
  end
end
