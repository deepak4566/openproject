module API
  module Utilities
    # Since APIv3 uses different names for some properties, there is sometimes the need to convert
    # names between the "old" Rails/ActiveRecord world of names and the "new" APIv3 world of names.
    # This class provides methods to cope with the necessary name conversions
    # There are multiple reasons for naming differences:
    #  - APIv3 is using camelCase as opposed to snake_case
    #  - APIv3 defines some properties as a different type, which requires a name change
    #     e.g. estimatedTime vs estimated_hours (AR: hours; API: generic duration)
    #  - some names used in AR are even there kind of deprecated
    #     e.g. version, which everyone refers to as version
    #  - some names in AR are plainly inconsistent, whereas the API tries to be as consistent as
    #    possible, e.g. updated_at vs updated_on
    #
    # Callers note: While this class is envisioned to be generally usable, it is currently solely
    # used for purposes around work packages. Further work might be required for conversions to make
    # sense in different contexts.
    class PropertyNameConverter
      # Converts the attribute name as referred to by ActiveRecord to a corresponding API-conform
      # attribute name:
      #  * camelCasing the attribute name
      #  * unifying :status and :status_id to 'status' (and other foo_id fields)
      #  * converting totally different attribute names (e.g. createdAt vs createdOn)
      def self.from_ar_name: (untyped attribute) -> untyped

      # Converts the attribute name as referred to by the APIv3 to the source name of the attribute
      # in ActiveRecord. For that to work properly, an instance of the correct AR-class needs
      # to be passed as context.
      def self.to_ar_name: (untyped attribute, context: untyped, ?refer_to_ids: bool, ?collapse_cf_name: bool) -> untyped

      private

      # Unifies different attributes referring to the same thing via a foreign key
      # e.g. status_id -> status
      def self.normalize_foreign_key_name: (untyped attribute) -> untyped

      # Adds _id(s) suffix to field names that refer to foreign key relations,
      # leaves other names untouched.
      # e.g.
      #   status -> status_id
      #   watcher -> watcher_ids
      def self.denormalize_foreign_key_name: (untyped attribute, untyped context) -> untyped

      def self.key_name_with_and_without_id: (untyped attribute_name) -> (::Array[untyped] | ::Array[untyped | ::String])

      # expands short custom field column names to be represented in their long form
      # (e.g. cf_1 -> custom_field_1)
      def self.expand_custom_field_name: (untyped attribute) -> untyped

      # collapses long custom field column names to be represented in their short form
      # (e.g. custom_field_1 -> cf_1)
      def self.collapse_custom_field_name: (untyped attribute) -> untyped

      def self.underscore_attribute: (untyped attribute) -> untyped
    end
  end
end
