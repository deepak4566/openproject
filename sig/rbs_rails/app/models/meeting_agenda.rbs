class MeetingAgenda < ::MeetingContent
  extend _ActiveRecord_Relation_ClassMethods[MeetingAgenda, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def type: () -> String?

    def type=: (String?) -> String?

    def type?: () -> bool

    def type_changed?: () -> bool

    def type_change: () -> [ String?, String? ]

    def type_will_change!: () -> void

    def type_was: () -> String?

    def type_previously_changed?: () -> bool

    def type_previous_change: () -> Array[String?]?

    def type_previously_was: () -> String?

    def type_before_last_save: () -> String?

    def type_change_to_be_saved: () -> Array[String?]?

    def type_in_database: () -> String?

    def saved_change_to_type: () -> Array[String?]?

    def saved_change_to_type?: () -> bool

    def will_save_change_to_type?: () -> bool

    def restore_type!: () -> void

    def clear_type_change: () -> void

    def meeting_id: () -> Integer?

    def meeting_id=: (Integer?) -> Integer?

    def meeting_id?: () -> bool

    def meeting_id_changed?: () -> bool

    def meeting_id_change: () -> [ Integer?, Integer? ]

    def meeting_id_will_change!: () -> void

    def meeting_id_was: () -> Integer?

    def meeting_id_previously_changed?: () -> bool

    def meeting_id_previous_change: () -> Array[Integer?]?

    def meeting_id_previously_was: () -> Integer?

    def meeting_id_before_last_save: () -> Integer?

    def meeting_id_change_to_be_saved: () -> Array[Integer?]?

    def meeting_id_in_database: () -> Integer?

    def saved_change_to_meeting_id: () -> Array[Integer?]?

    def saved_change_to_meeting_id?: () -> bool

    def will_save_change_to_meeting_id?: () -> bool

    def restore_meeting_id!: () -> void

    def clear_meeting_id_change: () -> void

    def author_id: () -> Integer?

    def author_id=: (Integer?) -> Integer?

    def author_id?: () -> bool

    def author_id_changed?: () -> bool

    def author_id_change: () -> [ Integer?, Integer? ]

    def author_id_will_change!: () -> void

    def author_id_was: () -> Integer?

    def author_id_previously_changed?: () -> bool

    def author_id_previous_change: () -> Array[Integer?]?

    def author_id_previously_was: () -> Integer?

    def author_id_before_last_save: () -> Integer?

    def author_id_change_to_be_saved: () -> Array[Integer?]?

    def author_id_in_database: () -> Integer?

    def saved_change_to_author_id: () -> Array[Integer?]?

    def saved_change_to_author_id?: () -> bool

    def will_save_change_to_author_id?: () -> bool

    def restore_author_id!: () -> void

    def clear_author_id_change: () -> void

    def text: () -> String?

    def text=: (String?) -> String?

    def text?: () -> bool

    def text_changed?: () -> bool

    def text_change: () -> [ String?, String? ]

    def text_will_change!: () -> void

    def text_was: () -> String?

    def text_previously_changed?: () -> bool

    def text_previous_change: () -> Array[String?]?

    def text_previously_was: () -> String?

    def text_before_last_save: () -> String?

    def text_change_to_be_saved: () -> Array[String?]?

    def text_in_database: () -> String?

    def saved_change_to_text: () -> Array[String?]?

    def saved_change_to_text?: () -> bool

    def will_save_change_to_text?: () -> bool

    def restore_text!: () -> void

    def clear_text_change: () -> void

    def lock_version: () -> Integer?

    def lock_version=: (Integer?) -> Integer?

    def lock_version?: () -> bool

    def lock_version_changed?: () -> bool

    def lock_version_change: () -> [ Integer?, Integer? ]

    def lock_version_will_change!: () -> void

    def lock_version_was: () -> Integer?

    def lock_version_previously_changed?: () -> bool

    def lock_version_previous_change: () -> Array[Integer?]?

    def lock_version_previously_was: () -> Integer?

    def lock_version_before_last_save: () -> Integer?

    def lock_version_change_to_be_saved: () -> Array[Integer?]?

    def lock_version_in_database: () -> Integer?

    def saved_change_to_lock_version: () -> Array[Integer?]?

    def saved_change_to_lock_version?: () -> bool

    def will_save_change_to_lock_version?: () -> bool

    def restore_lock_version!: () -> void

    def clear_lock_version_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void

    def locked: () -> bool?

    def locked=: (bool?) -> bool?

    def locked?: () -> bool

    def locked_changed?: () -> bool

    def locked_change: () -> [ bool?, bool? ]

    def locked_will_change!: () -> void

    def locked_was: () -> bool?

    def locked_previously_changed?: () -> bool

    def locked_previous_change: () -> Array[bool?]?

    def locked_previously_was: () -> bool?

    def locked_before_last_save: () -> bool?

    def locked_change_to_be_saved: () -> Array[bool?]?

    def locked_in_database: () -> bool?

    def saved_change_to_locked: () -> Array[bool?]?

    def saved_change_to_locked?: () -> bool

    def will_save_change_to_locked?: () -> bool

    def restore_locked!: () -> void

    def clear_locked_change: () -> void
  end
  include GeneratedAttributeMethods
  def attachments: () -> Attachment::ActiveRecord_Associations_CollectionProxy
  def attachments=: (Attachment::ActiveRecord_Associations_CollectionProxy | Array[Attachment]) -> (Attachment::ActiveRecord_Associations_CollectionProxy | Array[Attachment])
  def attachment_ids: () -> Array[Integer]
  def attachment_ids=: (Array[Integer]) -> Array[Integer]
  def journals: () -> Journal::ActiveRecord_Associations_CollectionProxy
  def journals=: (Journal::ActiveRecord_Associations_CollectionProxy | Array[Journal]) -> (Journal::ActiveRecord_Associations_CollectionProxy | Array[Journal])
  def journal_ids: () -> Array[Integer]
  def journal_ids=: (Array[Integer]) -> Array[Integer]
  def project: () -> Project?
  def project=: (Project?) -> Project?
  def build_project: (untyped) -> Project
  def create_project: (untyped) -> Project
  def create_project!: (untyped) -> Project
  def reload_project: () -> Project?
  def meeting: () -> Meeting
  def meeting=: (Meeting?) -> Meeting?
  def reload_meeting: () -> Meeting?
  def build_meeting: (untyped) -> Meeting
  def create_meeting: (untyped) -> Meeting
  def create_meeting!: (untyped) -> Meeting
  def author: () -> User
  def author=: (User?) -> User?
  def reload_author: () -> User?
  def build_author: (untyped) -> User
  def create_author: (untyped) -> User
  def create_author!: (untyped) -> User
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[MeetingAgenda, Integer]
    include Enumerable[MeetingAgenda]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[MeetingAgenda, Integer]
  end
end
