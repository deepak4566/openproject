class View < ::ApplicationRecord
  extend _ActiveRecord_Relation_ClassMethods[View, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def query_id: () -> Integer

    def query_id=: (Integer) -> Integer

    def query_id?: () -> bool

    def query_id_changed?: () -> bool

    def query_id_change: () -> [ Integer?, Integer? ]

    def query_id_will_change!: () -> void

    def query_id_was: () -> Integer?

    def query_id_previously_changed?: () -> bool

    def query_id_previous_change: () -> Array[Integer?]?

    def query_id_previously_was: () -> Integer?

    def query_id_before_last_save: () -> Integer?

    def query_id_change_to_be_saved: () -> Array[Integer?]?

    def query_id_in_database: () -> Integer?

    def saved_change_to_query_id: () -> Array[Integer?]?

    def saved_change_to_query_id?: () -> bool

    def will_save_change_to_query_id?: () -> bool

    def restore_query_id!: () -> void

    def clear_query_id_change: () -> void

    def options: () -> untyped

    def options=: (untyped) -> untyped

    def options?: () -> bool

    def options_changed?: () -> bool

    def options_change: () -> [ untyped?, untyped? ]

    def options_will_change!: () -> void

    def options_was: () -> untyped?

    def options_previously_changed?: () -> bool

    def options_previous_change: () -> Array[untyped?]?

    def options_previously_was: () -> untyped?

    def options_before_last_save: () -> untyped?

    def options_change_to_be_saved: () -> Array[untyped?]?

    def options_in_database: () -> untyped?

    def saved_change_to_options: () -> Array[untyped?]?

    def saved_change_to_options?: () -> bool

    def will_save_change_to_options?: () -> bool

    def restore_options!: () -> void

    def clear_options_change: () -> void

    def type: () -> String

    def type=: (String) -> String

    def type?: () -> bool

    def type_changed?: () -> bool

    def type_change: () -> [ String?, String? ]

    def type_will_change!: () -> void

    def type_was: () -> String?

    def type_previously_changed?: () -> bool

    def type_previous_change: () -> Array[String?]?

    def type_previously_was: () -> String?

    def type_before_last_save: () -> String?

    def type_change_to_be_saved: () -> Array[String?]?

    def type_in_database: () -> String?

    def saved_change_to_type: () -> Array[String?]?

    def saved_change_to_type?: () -> bool

    def will_save_change_to_type?: () -> bool

    def restore_type!: () -> void

    def clear_type_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone

    def created_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone

    def updated_at=: (ActiveSupport::TimeWithZone) -> ActiveSupport::TimeWithZone

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void
  end
  include GeneratedAttributeMethods

  def query: () -> Query
  def query=: (Query?) -> Query?
  def reload_query: () -> Query?
  def build_query: (untyped) -> Query
  def create_query: (untyped) -> Query
  def create_query!: (untyped) -> Query
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[View, Integer]
    include Enumerable[View]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[View, Integer]
  end
end
