class Impediment < ::Task
  extend _ActiveRecord_Relation_ClassMethods[Impediment, ActiveRecord_Relation, Integer]

  module GeneratedAttributeMethods
    def id: () -> Integer

    def id=: (Integer) -> Integer

    def id?: () -> bool

    def id_changed?: () -> bool

    def id_change: () -> [ Integer?, Integer? ]

    def id_will_change!: () -> void

    def id_was: () -> Integer?

    def id_previously_changed?: () -> bool

    def id_previous_change: () -> Array[Integer?]?

    def id_previously_was: () -> Integer?

    def id_before_last_save: () -> Integer?

    def id_change_to_be_saved: () -> Array[Integer?]?

    def id_in_database: () -> Integer?

    def saved_change_to_id: () -> Array[Integer?]?

    def saved_change_to_id?: () -> bool

    def will_save_change_to_id?: () -> bool

    def restore_id!: () -> void

    def clear_id_change: () -> void

    def type_id: () -> Integer

    def type_id=: (Integer) -> Integer

    def type_id?: () -> bool

    def type_id_changed?: () -> bool

    def type_id_change: () -> [ Integer?, Integer? ]

    def type_id_will_change!: () -> void

    def type_id_was: () -> Integer?

    def type_id_previously_changed?: () -> bool

    def type_id_previous_change: () -> Array[Integer?]?

    def type_id_previously_was: () -> Integer?

    def type_id_before_last_save: () -> Integer?

    def type_id_change_to_be_saved: () -> Array[Integer?]?

    def type_id_in_database: () -> Integer?

    def saved_change_to_type_id: () -> Array[Integer?]?

    def saved_change_to_type_id?: () -> bool

    def will_save_change_to_type_id?: () -> bool

    def restore_type_id!: () -> void

    def clear_type_id_change: () -> void

    def project_id: () -> Integer

    def project_id=: (Integer) -> Integer

    def project_id?: () -> bool

    def project_id_changed?: () -> bool

    def project_id_change: () -> [ Integer?, Integer? ]

    def project_id_will_change!: () -> void

    def project_id_was: () -> Integer?

    def project_id_previously_changed?: () -> bool

    def project_id_previous_change: () -> Array[Integer?]?

    def project_id_previously_was: () -> Integer?

    def project_id_before_last_save: () -> Integer?

    def project_id_change_to_be_saved: () -> Array[Integer?]?

    def project_id_in_database: () -> Integer?

    def saved_change_to_project_id: () -> Array[Integer?]?

    def saved_change_to_project_id?: () -> bool

    def will_save_change_to_project_id?: () -> bool

    def restore_project_id!: () -> void

    def clear_project_id_change: () -> void

    def subject: () -> String

    def subject=: (String) -> String

    def subject?: () -> bool

    def subject_changed?: () -> bool

    def subject_change: () -> [ String?, String? ]

    def subject_will_change!: () -> void

    def subject_was: () -> String?

    def subject_previously_changed?: () -> bool

    def subject_previous_change: () -> Array[String?]?

    def subject_previously_was: () -> String?

    def subject_before_last_save: () -> String?

    def subject_change_to_be_saved: () -> Array[String?]?

    def subject_in_database: () -> String?

    def saved_change_to_subject: () -> Array[String?]?

    def saved_change_to_subject?: () -> bool

    def will_save_change_to_subject?: () -> bool

    def restore_subject!: () -> void

    def clear_subject_change: () -> void

    def description: () -> String?

    def description=: (String?) -> String?

    def description?: () -> bool

    def description_changed?: () -> bool

    def description_change: () -> [ String?, String? ]

    def description_will_change!: () -> void

    def description_was: () -> String?

    def description_previously_changed?: () -> bool

    def description_previous_change: () -> Array[String?]?

    def description_previously_was: () -> String?

    def description_before_last_save: () -> String?

    def description_change_to_be_saved: () -> Array[String?]?

    def description_in_database: () -> String?

    def saved_change_to_description: () -> Array[String?]?

    def saved_change_to_description?: () -> bool

    def will_save_change_to_description?: () -> bool

    def restore_description!: () -> void

    def clear_description_change: () -> void

    def due_date: () -> Date?

    def due_date=: (Date?) -> Date?

    def due_date?: () -> bool

    def due_date_changed?: () -> bool

    def due_date_change: () -> [ Date?, Date? ]

    def due_date_will_change!: () -> void

    def due_date_was: () -> Date?

    def due_date_previously_changed?: () -> bool

    def due_date_previous_change: () -> Array[Date?]?

    def due_date_previously_was: () -> Date?

    def due_date_before_last_save: () -> Date?

    def due_date_change_to_be_saved: () -> Array[Date?]?

    def due_date_in_database: () -> Date?

    def saved_change_to_due_date: () -> Array[Date?]?

    def saved_change_to_due_date?: () -> bool

    def will_save_change_to_due_date?: () -> bool

    def restore_due_date!: () -> void

    def clear_due_date_change: () -> void

    def category_id: () -> Integer?

    def category_id=: (Integer?) -> Integer?

    def category_id?: () -> bool

    def category_id_changed?: () -> bool

    def category_id_change: () -> [ Integer?, Integer? ]

    def category_id_will_change!: () -> void

    def category_id_was: () -> Integer?

    def category_id_previously_changed?: () -> bool

    def category_id_previous_change: () -> Array[Integer?]?

    def category_id_previously_was: () -> Integer?

    def category_id_before_last_save: () -> Integer?

    def category_id_change_to_be_saved: () -> Array[Integer?]?

    def category_id_in_database: () -> Integer?

    def saved_change_to_category_id: () -> Array[Integer?]?

    def saved_change_to_category_id?: () -> bool

    def will_save_change_to_category_id?: () -> bool

    def restore_category_id!: () -> void

    def clear_category_id_change: () -> void

    def status_id: () -> Integer

    def status_id=: (Integer) -> Integer

    def status_id?: () -> bool

    def status_id_changed?: () -> bool

    def status_id_change: () -> [ Integer?, Integer? ]

    def status_id_will_change!: () -> void

    def status_id_was: () -> Integer?

    def status_id_previously_changed?: () -> bool

    def status_id_previous_change: () -> Array[Integer?]?

    def status_id_previously_was: () -> Integer?

    def status_id_before_last_save: () -> Integer?

    def status_id_change_to_be_saved: () -> Array[Integer?]?

    def status_id_in_database: () -> Integer?

    def saved_change_to_status_id: () -> Array[Integer?]?

    def saved_change_to_status_id?: () -> bool

    def will_save_change_to_status_id?: () -> bool

    def restore_status_id!: () -> void

    def clear_status_id_change: () -> void

    def assigned_to_id: () -> Integer?

    def assigned_to_id=: (Integer?) -> Integer?

    def assigned_to_id?: () -> bool

    def assigned_to_id_changed?: () -> bool

    def assigned_to_id_change: () -> [ Integer?, Integer? ]

    def assigned_to_id_will_change!: () -> void

    def assigned_to_id_was: () -> Integer?

    def assigned_to_id_previously_changed?: () -> bool

    def assigned_to_id_previous_change: () -> Array[Integer?]?

    def assigned_to_id_previously_was: () -> Integer?

    def assigned_to_id_before_last_save: () -> Integer?

    def assigned_to_id_change_to_be_saved: () -> Array[Integer?]?

    def assigned_to_id_in_database: () -> Integer?

    def saved_change_to_assigned_to_id: () -> Array[Integer?]?

    def saved_change_to_assigned_to_id?: () -> bool

    def will_save_change_to_assigned_to_id?: () -> bool

    def restore_assigned_to_id!: () -> void

    def clear_assigned_to_id_change: () -> void

    def priority_id: () -> Integer?

    def priority_id=: (Integer?) -> Integer?

    def priority_id?: () -> bool

    def priority_id_changed?: () -> bool

    def priority_id_change: () -> [ Integer?, Integer? ]

    def priority_id_will_change!: () -> void

    def priority_id_was: () -> Integer?

    def priority_id_previously_changed?: () -> bool

    def priority_id_previous_change: () -> Array[Integer?]?

    def priority_id_previously_was: () -> Integer?

    def priority_id_before_last_save: () -> Integer?

    def priority_id_change_to_be_saved: () -> Array[Integer?]?

    def priority_id_in_database: () -> Integer?

    def saved_change_to_priority_id: () -> Array[Integer?]?

    def saved_change_to_priority_id?: () -> bool

    def will_save_change_to_priority_id?: () -> bool

    def restore_priority_id!: () -> void

    def clear_priority_id_change: () -> void

    def version_id: () -> Integer?

    def version_id=: (Integer?) -> Integer?

    def version_id?: () -> bool

    def version_id_changed?: () -> bool

    def version_id_change: () -> [ Integer?, Integer? ]

    def version_id_will_change!: () -> void

    def version_id_was: () -> Integer?

    def version_id_previously_changed?: () -> bool

    def version_id_previous_change: () -> Array[Integer?]?

    def version_id_previously_was: () -> Integer?

    def version_id_before_last_save: () -> Integer?

    def version_id_change_to_be_saved: () -> Array[Integer?]?

    def version_id_in_database: () -> Integer?

    def saved_change_to_version_id: () -> Array[Integer?]?

    def saved_change_to_version_id?: () -> bool

    def will_save_change_to_version_id?: () -> bool

    def restore_version_id!: () -> void

    def clear_version_id_change: () -> void

    def author_id: () -> Integer

    def author_id=: (Integer) -> Integer

    def author_id?: () -> bool

    def author_id_changed?: () -> bool

    def author_id_change: () -> [ Integer?, Integer? ]

    def author_id_will_change!: () -> void

    def author_id_was: () -> Integer?

    def author_id_previously_changed?: () -> bool

    def author_id_previous_change: () -> Array[Integer?]?

    def author_id_previously_was: () -> Integer?

    def author_id_before_last_save: () -> Integer?

    def author_id_change_to_be_saved: () -> Array[Integer?]?

    def author_id_in_database: () -> Integer?

    def saved_change_to_author_id: () -> Array[Integer?]?

    def saved_change_to_author_id?: () -> bool

    def will_save_change_to_author_id?: () -> bool

    def restore_author_id!: () -> void

    def clear_author_id_change: () -> void

    def lock_version: () -> Integer

    def lock_version=: (Integer) -> Integer

    def lock_version?: () -> bool

    def lock_version_changed?: () -> bool

    def lock_version_change: () -> [ Integer?, Integer? ]

    def lock_version_will_change!: () -> void

    def lock_version_was: () -> Integer?

    def lock_version_previously_changed?: () -> bool

    def lock_version_previous_change: () -> Array[Integer?]?

    def lock_version_previously_was: () -> Integer?

    def lock_version_before_last_save: () -> Integer?

    def lock_version_change_to_be_saved: () -> Array[Integer?]?

    def lock_version_in_database: () -> Integer?

    def saved_change_to_lock_version: () -> Array[Integer?]?

    def saved_change_to_lock_version?: () -> bool

    def will_save_change_to_lock_version?: () -> bool

    def restore_lock_version!: () -> void

    def clear_lock_version_change: () -> void

    def done_ratio: () -> Integer

    def done_ratio=: (Integer) -> Integer

    def done_ratio?: () -> bool

    def done_ratio_changed?: () -> bool

    def done_ratio_change: () -> [ Integer?, Integer? ]

    def done_ratio_will_change!: () -> void

    def done_ratio_was: () -> Integer?

    def done_ratio_previously_changed?: () -> bool

    def done_ratio_previous_change: () -> Array[Integer?]?

    def done_ratio_previously_was: () -> Integer?

    def done_ratio_before_last_save: () -> Integer?

    def done_ratio_change_to_be_saved: () -> Array[Integer?]?

    def done_ratio_in_database: () -> Integer?

    def saved_change_to_done_ratio: () -> Array[Integer?]?

    def saved_change_to_done_ratio?: () -> bool

    def will_save_change_to_done_ratio?: () -> bool

    def restore_done_ratio!: () -> void

    def clear_done_ratio_change: () -> void

    def estimated_hours: () -> Float?

    def estimated_hours=: (Float?) -> Float?

    def estimated_hours?: () -> bool

    def estimated_hours_changed?: () -> bool

    def estimated_hours_change: () -> [ Float?, Float? ]

    def estimated_hours_will_change!: () -> void

    def estimated_hours_was: () -> Float?

    def estimated_hours_previously_changed?: () -> bool

    def estimated_hours_previous_change: () -> Array[Float?]?

    def estimated_hours_previously_was: () -> Float?

    def estimated_hours_before_last_save: () -> Float?

    def estimated_hours_change_to_be_saved: () -> Array[Float?]?

    def estimated_hours_in_database: () -> Float?

    def saved_change_to_estimated_hours: () -> Array[Float?]?

    def saved_change_to_estimated_hours?: () -> bool

    def will_save_change_to_estimated_hours?: () -> bool

    def restore_estimated_hours!: () -> void

    def clear_estimated_hours_change: () -> void

    def created_at: () -> ActiveSupport::TimeWithZone?

    def created_at=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def created_at?: () -> bool

    def created_at_changed?: () -> bool

    def created_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def created_at_will_change!: () -> void

    def created_at_was: () -> ActiveSupport::TimeWithZone?

    def created_at_previously_changed?: () -> bool

    def created_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def created_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def created_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def created_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_created_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_created_at?: () -> bool

    def will_save_change_to_created_at?: () -> bool

    def restore_created_at!: () -> void

    def clear_created_at_change: () -> void

    def updated_at: () -> ActiveSupport::TimeWithZone?

    def updated_at=: (ActiveSupport::TimeWithZone?) -> ActiveSupport::TimeWithZone?

    def updated_at?: () -> bool

    def updated_at_changed?: () -> bool

    def updated_at_change: () -> [ ActiveSupport::TimeWithZone?, ActiveSupport::TimeWithZone? ]

    def updated_at_will_change!: () -> void

    def updated_at_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_previously_changed?: () -> bool

    def updated_at_previous_change: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_previously_was: () -> ActiveSupport::TimeWithZone?

    def updated_at_before_last_save: () -> ActiveSupport::TimeWithZone?

    def updated_at_change_to_be_saved: () -> Array[ActiveSupport::TimeWithZone?]?

    def updated_at_in_database: () -> ActiveSupport::TimeWithZone?

    def saved_change_to_updated_at: () -> Array[ActiveSupport::TimeWithZone?]?

    def saved_change_to_updated_at?: () -> bool

    def will_save_change_to_updated_at?: () -> bool

    def restore_updated_at!: () -> void

    def clear_updated_at_change: () -> void

    def start_date: () -> Date?

    def start_date=: (Date?) -> Date?

    def start_date?: () -> bool

    def start_date_changed?: () -> bool

    def start_date_change: () -> [ Date?, Date? ]

    def start_date_will_change!: () -> void

    def start_date_was: () -> Date?

    def start_date_previously_changed?: () -> bool

    def start_date_previous_change: () -> Array[Date?]?

    def start_date_previously_was: () -> Date?

    def start_date_before_last_save: () -> Date?

    def start_date_change_to_be_saved: () -> Array[Date?]?

    def start_date_in_database: () -> Date?

    def saved_change_to_start_date: () -> Array[Date?]?

    def saved_change_to_start_date?: () -> bool

    def will_save_change_to_start_date?: () -> bool

    def restore_start_date!: () -> void

    def clear_start_date_change: () -> void

    def responsible_id: () -> Integer?

    def responsible_id=: (Integer?) -> Integer?

    def responsible_id?: () -> bool

    def responsible_id_changed?: () -> bool

    def responsible_id_change: () -> [ Integer?, Integer? ]

    def responsible_id_will_change!: () -> void

    def responsible_id_was: () -> Integer?

    def responsible_id_previously_changed?: () -> bool

    def responsible_id_previous_change: () -> Array[Integer?]?

    def responsible_id_previously_was: () -> Integer?

    def responsible_id_before_last_save: () -> Integer?

    def responsible_id_change_to_be_saved: () -> Array[Integer?]?

    def responsible_id_in_database: () -> Integer?

    def saved_change_to_responsible_id: () -> Array[Integer?]?

    def saved_change_to_responsible_id?: () -> bool

    def will_save_change_to_responsible_id?: () -> bool

    def restore_responsible_id!: () -> void

    def clear_responsible_id_change: () -> void

    def budget_id: () -> Integer?

    def budget_id=: (Integer?) -> Integer?

    def budget_id?: () -> bool

    def budget_id_changed?: () -> bool

    def budget_id_change: () -> [ Integer?, Integer? ]

    def budget_id_will_change!: () -> void

    def budget_id_was: () -> Integer?

    def budget_id_previously_changed?: () -> bool

    def budget_id_previous_change: () -> Array[Integer?]?

    def budget_id_previously_was: () -> Integer?

    def budget_id_before_last_save: () -> Integer?

    def budget_id_change_to_be_saved: () -> Array[Integer?]?

    def budget_id_in_database: () -> Integer?

    def saved_change_to_budget_id: () -> Array[Integer?]?

    def saved_change_to_budget_id?: () -> bool

    def will_save_change_to_budget_id?: () -> bool

    def restore_budget_id!: () -> void

    def clear_budget_id_change: () -> void

    def position: () -> Integer?

    def position=: (Integer?) -> Integer?

    def position?: () -> bool

    def position_changed?: () -> bool

    def position_change: () -> [ Integer?, Integer? ]

    def position_will_change!: () -> void

    def position_was: () -> Integer?

    def position_previously_changed?: () -> bool

    def position_previous_change: () -> Array[Integer?]?

    def position_previously_was: () -> Integer?

    def position_before_last_save: () -> Integer?

    def position_change_to_be_saved: () -> Array[Integer?]?

    def position_in_database: () -> Integer?

    def saved_change_to_position: () -> Array[Integer?]?

    def saved_change_to_position?: () -> bool

    def will_save_change_to_position?: () -> bool

    def restore_position!: () -> void

    def clear_position_change: () -> void

    def story_points: () -> Integer?

    def story_points=: (Integer?) -> Integer?

    def story_points?: () -> bool

    def story_points_changed?: () -> bool

    def story_points_change: () -> [ Integer?, Integer? ]

    def story_points_will_change!: () -> void

    def story_points_was: () -> Integer?

    def story_points_previously_changed?: () -> bool

    def story_points_previous_change: () -> Array[Integer?]?

    def story_points_previously_was: () -> Integer?

    def story_points_before_last_save: () -> Integer?

    def story_points_change_to_be_saved: () -> Array[Integer?]?

    def story_points_in_database: () -> Integer?

    def saved_change_to_story_points: () -> Array[Integer?]?

    def saved_change_to_story_points?: () -> bool

    def will_save_change_to_story_points?: () -> bool

    def restore_story_points!: () -> void

    def clear_story_points_change: () -> void

    def remaining_hours: () -> Float?

    def remaining_hours=: (Float?) -> Float?

    def remaining_hours?: () -> bool

    def remaining_hours_changed?: () -> bool

    def remaining_hours_change: () -> [ Float?, Float? ]

    def remaining_hours_will_change!: () -> void

    def remaining_hours_was: () -> Float?

    def remaining_hours_previously_changed?: () -> bool

    def remaining_hours_previous_change: () -> Array[Float?]?

    def remaining_hours_previously_was: () -> Float?

    def remaining_hours_before_last_save: () -> Float?

    def remaining_hours_change_to_be_saved: () -> Array[Float?]?

    def remaining_hours_in_database: () -> Float?

    def saved_change_to_remaining_hours: () -> Array[Float?]?

    def saved_change_to_remaining_hours?: () -> bool

    def will_save_change_to_remaining_hours?: () -> bool

    def restore_remaining_hours!: () -> void

    def clear_remaining_hours_change: () -> void

    def derived_estimated_hours: () -> Float?

    def derived_estimated_hours=: (Float?) -> Float?

    def derived_estimated_hours?: () -> bool

    def derived_estimated_hours_changed?: () -> bool

    def derived_estimated_hours_change: () -> [ Float?, Float? ]

    def derived_estimated_hours_will_change!: () -> void

    def derived_estimated_hours_was: () -> Float?

    def derived_estimated_hours_previously_changed?: () -> bool

    def derived_estimated_hours_previous_change: () -> Array[Float?]?

    def derived_estimated_hours_previously_was: () -> Float?

    def derived_estimated_hours_before_last_save: () -> Float?

    def derived_estimated_hours_change_to_be_saved: () -> Array[Float?]?

    def derived_estimated_hours_in_database: () -> Float?

    def saved_change_to_derived_estimated_hours: () -> Array[Float?]?

    def saved_change_to_derived_estimated_hours?: () -> bool

    def will_save_change_to_derived_estimated_hours?: () -> bool

    def restore_derived_estimated_hours!: () -> void

    def clear_derived_estimated_hours_change: () -> void

    def schedule_manually: () -> bool?

    def schedule_manually=: (bool?) -> bool?

    def schedule_manually?: () -> bool

    def schedule_manually_changed?: () -> bool

    def schedule_manually_change: () -> [ bool?, bool? ]

    def schedule_manually_will_change!: () -> void

    def schedule_manually_was: () -> bool?

    def schedule_manually_previously_changed?: () -> bool

    def schedule_manually_previous_change: () -> Array[bool?]?

    def schedule_manually_previously_was: () -> bool?

    def schedule_manually_before_last_save: () -> bool?

    def schedule_manually_change_to_be_saved: () -> Array[bool?]?

    def schedule_manually_in_database: () -> bool?

    def saved_change_to_schedule_manually: () -> Array[bool?]?

    def saved_change_to_schedule_manually?: () -> bool

    def will_save_change_to_schedule_manually?: () -> bool

    def restore_schedule_manually!: () -> void

    def clear_schedule_manually_change: () -> void

    def parent_id: () -> Integer?

    def parent_id=: (Integer?) -> Integer?

    def parent_id?: () -> bool

    def parent_id_changed?: () -> bool

    def parent_id_change: () -> [ Integer?, Integer? ]

    def parent_id_will_change!: () -> void

    def parent_id_was: () -> Integer?

    def parent_id_previously_changed?: () -> bool

    def parent_id_previous_change: () -> Array[Integer?]?

    def parent_id_previously_was: () -> Integer?

    def parent_id_before_last_save: () -> Integer?

    def parent_id_change_to_be_saved: () -> Array[Integer?]?

    def parent_id_in_database: () -> Integer?

    def saved_change_to_parent_id: () -> Array[Integer?]?

    def saved_change_to_parent_id?: () -> bool

    def will_save_change_to_parent_id?: () -> bool

    def restore_parent_id!: () -> void

    def clear_parent_id_change: () -> void

    def duration: () -> Integer?

    def duration=: (Integer?) -> Integer?

    def duration?: () -> bool

    def duration_changed?: () -> bool

    def duration_change: () -> [ Integer?, Integer? ]

    def duration_will_change!: () -> void

    def duration_was: () -> Integer?

    def duration_previously_changed?: () -> bool

    def duration_previous_change: () -> Array[Integer?]?

    def duration_previously_was: () -> Integer?

    def duration_before_last_save: () -> Integer?

    def duration_change_to_be_saved: () -> Array[Integer?]?

    def duration_in_database: () -> Integer?

    def saved_change_to_duration: () -> Array[Integer?]?

    def saved_change_to_duration?: () -> bool

    def will_save_change_to_duration?: () -> bool

    def restore_duration!: () -> void

    def clear_duration_change: () -> void

    def ignore_non_working_days: () -> bool

    def ignore_non_working_days=: (bool) -> bool

    def ignore_non_working_days?: () -> bool

    def ignore_non_working_days_changed?: () -> bool

    def ignore_non_working_days_change: () -> [ bool?, bool? ]

    def ignore_non_working_days_will_change!: () -> void

    def ignore_non_working_days_was: () -> bool?

    def ignore_non_working_days_previously_changed?: () -> bool

    def ignore_non_working_days_previous_change: () -> Array[bool?]?

    def ignore_non_working_days_previously_was: () -> bool?

    def ignore_non_working_days_before_last_save: () -> bool?

    def ignore_non_working_days_change_to_be_saved: () -> Array[bool?]?

    def ignore_non_working_days_in_database: () -> bool?

    def saved_change_to_ignore_non_working_days: () -> Array[bool?]?

    def saved_change_to_ignore_non_working_days?: () -> bool

    def will_save_change_to_ignore_non_working_days?: () -> bool

    def restore_ignore_non_working_days!: () -> void

    def clear_ignore_non_working_days_change: () -> void
  end
  include GeneratedAttributeMethods
  def cost_entries: () -> CostEntry::ActiveRecord_Associations_CollectionProxy
  def cost_entries=: (CostEntry::ActiveRecord_Associations_CollectionProxy | Array[CostEntry]) -> (CostEntry::ActiveRecord_Associations_CollectionProxy | Array[CostEntry])
  def cost_entry_ids: () -> Array[Integer]
  def cost_entry_ids=: (Array[Integer]) -> Array[Integer]
  def relations: () -> Relation::ActiveRecord_Associations_CollectionProxy
  def relations=: (Relation::ActiveRecord_Associations_CollectionProxy | Array[Relation]) -> (Relation::ActiveRecord_Associations_CollectionProxy | Array[Relation])
  def relation_ids: () -> Array[Integer]
  def relation_ids=: (Array[Integer]) -> Array[Integer]
  def follows_relations: () -> Relation::ActiveRecord_Associations_CollectionProxy
  def follows_relations=: (Relation::ActiveRecord_Associations_CollectionProxy | Array[Relation]) -> (Relation::ActiveRecord_Associations_CollectionProxy | Array[Relation])
  def follows_relation_ids: () -> Array[Integer]
  def follows_relation_ids=: (Array[Integer]) -> Array[Integer]
  def blocks_relations: () -> Relation::ActiveRecord_Associations_CollectionProxy
  def blocks_relations=: (Relation::ActiveRecord_Associations_CollectionProxy | Array[Relation]) -> (Relation::ActiveRecord_Associations_CollectionProxy | Array[Relation])
  def blocks_relation_ids: () -> Array[Integer]
  def blocks_relation_ids=: (Array[Integer]) -> Array[Integer]
  def duplicates_relations: () -> Relation::ActiveRecord_Associations_CollectionProxy
  def duplicates_relations=: (Relation::ActiveRecord_Associations_CollectionProxy | Array[Relation]) -> (Relation::ActiveRecord_Associations_CollectionProxy | Array[Relation])
  def duplicates_relation_ids: () -> Array[Integer]
  def duplicates_relation_ids=: (Array[Integer]) -> Array[Integer]
  def duplicated_relations: () -> Relation::ActiveRecord_Associations_CollectionProxy
  def duplicated_relations=: (Relation::ActiveRecord_Associations_CollectionProxy | Array[Relation]) -> (Relation::ActiveRecord_Associations_CollectionProxy | Array[Relation])
  def duplicated_relation_ids: () -> Array[Integer]
  def duplicated_relation_ids=: (Array[Integer]) -> Array[Integer]
  def time_entries: () -> TimeEntry::ActiveRecord_Associations_CollectionProxy
  def time_entries=: (TimeEntry::ActiveRecord_Associations_CollectionProxy | Array[TimeEntry]) -> (TimeEntry::ActiveRecord_Associations_CollectionProxy | Array[TimeEntry])
  def time_entry_ids: () -> Array[Integer]
  def time_entry_ids=: (Array[Integer]) -> Array[Integer]
  def file_links: () -> Storages::FileLink::ActiveRecord_Associations_CollectionProxy
  def file_links=: (Storages::FileLink::ActiveRecord_Associations_CollectionProxy | Array[Storages::FileLink]) -> (Storages::FileLink::ActiveRecord_Associations_CollectionProxy | Array[Storages::FileLink])
  def file_link_ids: () -> Array[Integer]
  def file_link_ids=: (Array[Integer]) -> Array[Integer]
  def storages: () -> Storages::Storage::ActiveRecord_Associations_CollectionProxy
  def storages=: (Storages::Storage::ActiveRecord_Associations_CollectionProxy | Array[Storages::Storage]) -> (Storages::Storage::ActiveRecord_Associations_CollectionProxy | Array[Storages::Storage])
  def storage_ids: () -> Array[Integer]
  def storage_ids=: (Array[Integer]) -> Array[Integer]
  def watchers: () -> Watcher::ActiveRecord_Associations_CollectionProxy
  def watchers=: (Watcher::ActiveRecord_Associations_CollectionProxy | Array[Watcher]) -> (Watcher::ActiveRecord_Associations_CollectionProxy | Array[Watcher])
  def watcher_ids: () -> Array[Integer]
  def watcher_ids=: (Array[Integer]) -> Array[Integer]
  def watcher_users: () -> User::ActiveRecord_Associations_CollectionProxy
  def watcher_users=: (User::ActiveRecord_Associations_CollectionProxy | Array[User]) -> (User::ActiveRecord_Associations_CollectionProxy | Array[User])
  def watcher_user_ids: () -> Array[Integer]
  def watcher_user_ids=: (Array[Integer]) -> Array[Integer]
  def custom_values: () -> CustomValue::ActiveRecord_Associations_CollectionProxy
  def custom_values=: (CustomValue::ActiveRecord_Associations_CollectionProxy | Array[CustomValue]) -> (CustomValue::ActiveRecord_Associations_CollectionProxy | Array[CustomValue])
  def custom_value_ids: () -> Array[Integer]
  def custom_value_ids=: (Array[Integer]) -> Array[Integer]
  def children: () -> WorkPackage::ActiveRecord_Associations_CollectionProxy
  def children=: (WorkPackage::ActiveRecord_Associations_CollectionProxy | Array[WorkPackage]) -> (WorkPackage::ActiveRecord_Associations_CollectionProxy | Array[WorkPackage])
  def child_ids: () -> Array[Integer]
  def child_ids=: (Array[Integer]) -> Array[Integer]
  def ancestor_hierarchies: () -> WorkPackageHierarchy::ActiveRecord_Associations_CollectionProxy
  def ancestor_hierarchies=: (WorkPackageHierarchy::ActiveRecord_Associations_CollectionProxy | Array[WorkPackageHierarchy]) -> (WorkPackageHierarchy::ActiveRecord_Associations_CollectionProxy | Array[WorkPackageHierarchy])
  def ancestor_hierarchy_ids: () -> Array[Integer]
  def ancestor_hierarchy_ids=: (Array[Integer]) -> Array[Integer]
  def self_and_ancestors: () -> WorkPackage::ActiveRecord_Associations_CollectionProxy
  def self_and_ancestors=: (WorkPackage::ActiveRecord_Associations_CollectionProxy | Array[WorkPackage]) -> (WorkPackage::ActiveRecord_Associations_CollectionProxy | Array[WorkPackage])
  def self_and_ancestor_ids: () -> Array[Integer]
  def self_and_ancestor_ids=: (Array[Integer]) -> Array[Integer]
  def descendant_hierarchies: () -> WorkPackageHierarchy::ActiveRecord_Associations_CollectionProxy
  def descendant_hierarchies=: (WorkPackageHierarchy::ActiveRecord_Associations_CollectionProxy | Array[WorkPackageHierarchy]) -> (WorkPackageHierarchy::ActiveRecord_Associations_CollectionProxy | Array[WorkPackageHierarchy])
  def descendant_hierarchy_ids: () -> Array[Integer]
  def descendant_hierarchy_ids=: (Array[Integer]) -> Array[Integer]
  def self_and_descendants: () -> WorkPackage::ActiveRecord_Associations_CollectionProxy
  def self_and_descendants=: (WorkPackage::ActiveRecord_Associations_CollectionProxy | Array[WorkPackage]) -> (WorkPackage::ActiveRecord_Associations_CollectionProxy | Array[WorkPackage])
  def self_and_descendant_ids: () -> Array[Integer]
  def self_and_descendant_ids=: (Array[Integer]) -> Array[Integer]
  def paper_trail_audits: () -> PaperTrailAudit::ActiveRecord_Associations_CollectionProxy
  def paper_trail_audits=: (PaperTrailAudit::ActiveRecord_Associations_CollectionProxy | Array[PaperTrailAudit]) -> (PaperTrailAudit::ActiveRecord_Associations_CollectionProxy | Array[PaperTrailAudit])
  def paper_trail_audit_ids: () -> Array[Integer]
  def paper_trail_audit_ids=: (Array[Integer]) -> Array[Integer]
  def attachments: () -> Attachment::ActiveRecord_Associations_CollectionProxy
  def attachments=: (Attachment::ActiveRecord_Associations_CollectionProxy | Array[Attachment]) -> (Attachment::ActiveRecord_Associations_CollectionProxy | Array[Attachment])
  def attachment_ids: () -> Array[Integer]
  def attachment_ids=: (Array[Integer]) -> Array[Integer]
  def journals: () -> Journal::ActiveRecord_Associations_CollectionProxy
  def journals=: (Journal::ActiveRecord_Associations_CollectionProxy | Array[Journal]) -> (Journal::ActiveRecord_Associations_CollectionProxy | Array[Journal])
  def journal_ids: () -> Array[Integer]
  def journal_ids=: (Array[Integer]) -> Array[Integer]
  def bcf_issue: () -> Bim::Bcf::Issue?
  def bcf_issue=: (Bim::Bcf::Issue?) -> Bim::Bcf::Issue?
  def build_bcf_issue: (untyped) -> Bim::Bcf::Issue
  def create_bcf_issue: (untyped) -> Bim::Bcf::Issue
  def create_bcf_issue!: (untyped) -> Bim::Bcf::Issue
  def reload_bcf_issue: () -> Bim::Bcf::Issue?
  def budget: () -> Budget?
  def budget=: (Budget?) -> Budget?
  def reload_budget: () -> Budget?
  def build_budget: (untyped) -> Budget
  def create_budget: (untyped) -> Budget
  def create_budget!: (untyped) -> Budget
  def project: () -> Project
  def project=: (Project?) -> Project?
  def reload_project: () -> Project?
  def build_project: (untyped) -> Project
  def create_project: (untyped) -> Project
  def create_project!: (untyped) -> Project
  def type: () -> Type
  def type=: (Type?) -> Type?
  def reload_type: () -> Type?
  def build_type: (untyped) -> Type
  def create_type: (untyped) -> Type
  def create_type!: (untyped) -> Type
  def status: () -> Status
  def status=: (Status?) -> Status?
  def reload_status: () -> Status?
  def build_status: (untyped) -> Status
  def create_status: (untyped) -> Status
  def create_status!: (untyped) -> Status
  def author: () -> User
  def author=: (User?) -> User?
  def reload_author: () -> User?
  def build_author: (untyped) -> User
  def create_author: (untyped) -> User
  def create_author!: (untyped) -> User
  def assigned_to: () -> Principal?
  def assigned_to=: (Principal?) -> Principal?
  def reload_assigned_to: () -> Principal?
  def build_assigned_to: (untyped) -> Principal
  def create_assigned_to: (untyped) -> Principal
  def create_assigned_to!: (untyped) -> Principal
  def responsible: () -> Principal?
  def responsible=: (Principal?) -> Principal?
  def reload_responsible: () -> Principal?
  def build_responsible: (untyped) -> Principal
  def create_responsible: (untyped) -> Principal
  def create_responsible!: (untyped) -> Principal
  def version: () -> Version?
  def version=: (Version?) -> Version?
  def reload_version: () -> Version?
  def build_version: (untyped) -> Version
  def create_version: (untyped) -> Version
  def create_version!: (untyped) -> Version
  def priority: () -> IssuePriority
  def priority=: (IssuePriority?) -> IssuePriority?
  def reload_priority: () -> IssuePriority?
  def build_priority: (untyped) -> IssuePriority
  def create_priority: (untyped) -> IssuePriority
  def create_priority!: (untyped) -> IssuePriority
  def category: () -> Category?
  def category=: (Category?) -> Category?
  def reload_category: () -> Category?
  def build_category: (untyped) -> Category
  def create_category: (untyped) -> Category
  def create_category!: (untyped) -> Category
  def parent: () -> WorkPackage?
  def parent=: (WorkPackage?) -> WorkPackage?
  def reload_parent: () -> WorkPackage?
  def build_parent: (untyped) -> WorkPackage
  def create_parent: (untyped) -> WorkPackage
  def create_parent!: (untyped) -> WorkPackage
  module GeneratedAssociationMethods
  end
  include GeneratedAssociationMethods

  module GeneratedRelationMethods
  end

  class ActiveRecord_Relation < ::ActiveRecord::Relation
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Impediment, Integer]
    include Enumerable[Impediment]
  end

  class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
    include GeneratedRelationMethods
    include _ActiveRecord_Relation[Impediment, Integer]
  end
end
