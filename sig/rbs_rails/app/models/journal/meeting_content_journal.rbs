class Journal < ::ApplicationRecord
  class MeetingContentJournal < ::Journal::BaseJournal
    extend _ActiveRecord_Relation_ClassMethods[Journal::MeetingContentJournal, ActiveRecord_Relation, Integer]

    module GeneratedAttributeMethods
      def id: () -> Integer

      def id=: (Integer) -> Integer

      def id?: () -> bool

      def id_changed?: () -> bool

      def id_change: () -> [ Integer?, Integer? ]

      def id_will_change!: () -> void

      def id_was: () -> Integer?

      def id_previously_changed?: () -> bool

      def id_previous_change: () -> Array[Integer?]?

      def id_previously_was: () -> Integer?

      def id_before_last_save: () -> Integer?

      def id_change_to_be_saved: () -> Array[Integer?]?

      def id_in_database: () -> Integer?

      def saved_change_to_id: () -> Array[Integer?]?

      def saved_change_to_id?: () -> bool

      def will_save_change_to_id?: () -> bool

      def restore_id!: () -> void

      def clear_id_change: () -> void

      def meeting_id: () -> Integer?

      def meeting_id=: (Integer?) -> Integer?

      def meeting_id?: () -> bool

      def meeting_id_changed?: () -> bool

      def meeting_id_change: () -> [ Integer?, Integer? ]

      def meeting_id_will_change!: () -> void

      def meeting_id_was: () -> Integer?

      def meeting_id_previously_changed?: () -> bool

      def meeting_id_previous_change: () -> Array[Integer?]?

      def meeting_id_previously_was: () -> Integer?

      def meeting_id_before_last_save: () -> Integer?

      def meeting_id_change_to_be_saved: () -> Array[Integer?]?

      def meeting_id_in_database: () -> Integer?

      def saved_change_to_meeting_id: () -> Array[Integer?]?

      def saved_change_to_meeting_id?: () -> bool

      def will_save_change_to_meeting_id?: () -> bool

      def restore_meeting_id!: () -> void

      def clear_meeting_id_change: () -> void

      def author_id: () -> Integer?

      def author_id=: (Integer?) -> Integer?

      def author_id?: () -> bool

      def author_id_changed?: () -> bool

      def author_id_change: () -> [ Integer?, Integer? ]

      def author_id_will_change!: () -> void

      def author_id_was: () -> Integer?

      def author_id_previously_changed?: () -> bool

      def author_id_previous_change: () -> Array[Integer?]?

      def author_id_previously_was: () -> Integer?

      def author_id_before_last_save: () -> Integer?

      def author_id_change_to_be_saved: () -> Array[Integer?]?

      def author_id_in_database: () -> Integer?

      def saved_change_to_author_id: () -> Array[Integer?]?

      def saved_change_to_author_id?: () -> bool

      def will_save_change_to_author_id?: () -> bool

      def restore_author_id!: () -> void

      def clear_author_id_change: () -> void

      def text: () -> String?

      def text=: (String?) -> String?

      def text?: () -> bool

      def text_changed?: () -> bool

      def text_change: () -> [ String?, String? ]

      def text_will_change!: () -> void

      def text_was: () -> String?

      def text_previously_changed?: () -> bool

      def text_previous_change: () -> Array[String?]?

      def text_previously_was: () -> String?

      def text_before_last_save: () -> String?

      def text_change_to_be_saved: () -> Array[String?]?

      def text_in_database: () -> String?

      def saved_change_to_text: () -> Array[String?]?

      def saved_change_to_text?: () -> bool

      def will_save_change_to_text?: () -> bool

      def restore_text!: () -> void

      def clear_text_change: () -> void

      def locked: () -> bool?

      def locked=: (bool?) -> bool?

      def locked?: () -> bool

      def locked_changed?: () -> bool

      def locked_change: () -> [ bool?, bool? ]

      def locked_will_change!: () -> void

      def locked_was: () -> bool?

      def locked_previously_changed?: () -> bool

      def locked_previous_change: () -> Array[bool?]?

      def locked_previously_was: () -> bool?

      def locked_before_last_save: () -> bool?

      def locked_change_to_be_saved: () -> Array[bool?]?

      def locked_in_database: () -> bool?

      def saved_change_to_locked: () -> Array[bool?]?

      def saved_change_to_locked?: () -> bool

      def will_save_change_to_locked?: () -> bool

      def restore_locked!: () -> void

      def clear_locked_change: () -> void
    end
    include GeneratedAttributeMethods

    def journal: () -> Journal?
    def journal=: (Journal?) -> Journal?
    def build_journal: (untyped) -> Journal
    def create_journal: (untyped) -> Journal
    def create_journal!: (untyped) -> Journal
    def reload_journal: () -> Journal?
    def meeting: () -> Meeting
    def meeting=: (Meeting?) -> Meeting?
    def reload_meeting: () -> Meeting?
    def build_meeting: (untyped) -> Meeting
    def create_meeting: (untyped) -> Meeting
    def create_meeting!: (untyped) -> Meeting
    def author: () -> User
    def author=: (User?) -> User?
    def reload_author: () -> User?
    def build_author: (untyped) -> User
    def create_author: (untyped) -> User
    def create_author!: (untyped) -> User
    module GeneratedAssociationMethods
    end
    include GeneratedAssociationMethods

    module GeneratedRelationMethods
    end

    class ActiveRecord_Relation < ::ActiveRecord::Relation
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[Journal::MeetingContentJournal, Integer]
      include Enumerable[Journal::MeetingContentJournal]
    end

    class ActiveRecord_Associations_CollectionProxy < ::ActiveRecord::Associations::CollectionProxy
      include GeneratedRelationMethods
      include _ActiveRecord_Relation[Journal::MeetingContentJournal, Integer]
    end
  end
end
