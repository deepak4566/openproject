class MailHandler < ActionMailer::Base
  include ActionView::Helpers::SanitizeHelper

  include Redmine::I18n

  class UnauthorizedAction < StandardError
  end

  class MissingInformation < StandardError
  end

  attr_reader email: untyped

  attr_reader sender_email: untyped

  attr_reader user: untyped

  attr_reader options: untyped

  attr_reader logs: untyped

  def initialize: () -> void

  #
  # Code copied from base class and extended with optional options parameter
  # as well as force_encoding support.
  def self.receive: (untyped raw_mail, ?::Hash[untyped, untyped] options) -> untyped

  def self.with_options: (untyped options) -> untyped

  # Processes incoming emails
  # Returns the created object (eg. an issue, a message) or false
  def receive: (untyped email) -> untyped

  def options=: (untyped value) -> untyped

  private

  # Dispatches the mail to the most appropriate method:
  # * If there is no References header the email is interpreted as a new work package
  # * If there is a References header the email is interpreted to update an existing entity (e.g. a work package
  #   or a message)
  #
  # OpenProject includes the necessary references in the References header of outgoing mail (see ApplicationMailer).
  # This stretches the standard in that the values do not reference existing mails but it has the advantage of being able
  # identify the object the response is destined for without human interference. Email clients will not remove
  # entries from the References header but only add to it.
  #
  # OpenProject also sets the Message-ID header but gateways such as postmark, unless explicitly instructed otherwise,
  # will use their own Message-ID and overwrite the provided one. As an email client includes the value thereof
  # in the In-Reply-To and in the References header the Message-ID could also have been used.
  #
  # Relying on the subject of the mail, which had been implemented before, is brittle as it relies on the user not altering
  # the subject. Additionally, the subject structure might change, e.g. via localization changes.
  def dispatch: () -> untyped

  # Dispatch the mail to the default method handler, receive_work_package
  #
  # This can be overridden or patched to support handling other incoming
  # email types
  def dispatch_to_default: () -> untyped

  REFERENCES_RE: ::Regexp

  #
  # Find a matching method to dispatch to given the mail's references header.
  # We set this header in outgoing emails to include an encoded reference to the object
  def dispatch_target_from_header: () -> untyped

  # Creates a new work package
  def receive_work_package: () -> untyped

  def receive_journal_reply: (untyped journal_id) -> (nil | untyped)

  # Adds a note to an existing work package
  def receive_work_package_reply: (untyped work_package_id) -> (nil | untyped)

  # Receives a reply to a forum message
  def receive_message_reply: (untyped message_id) -> untyped

  def add_attachments: (untyped container) -> (::Array[untyped] | untyped)

  def create_attachment: (untyped attachment, untyped container) -> untyped

  # Adds To and Cc as watchers of the given object if the sender has the
  # appropriate permission
  def add_watchers: (untyped obj) -> (untyped | nil)

  def get_keyword: (untyped attr, ?::Hash[untyped, untyped] options) -> untyped

  # Destructively extracts the value for +attr+ in +text+
  # Returns nil if no matching keyword found
  def extract_keyword!: (untyped text, untyped attr, untyped format) -> untyped

  def human_attr_translations: (untyped attr) -> untyped

  def target_project: () -> untyped

  # Returns a Hash of issue attributes extracted from keywords in the email body
  def wp_attributes_from_keywords: (untyped work_package) -> untyped

  # Returns a Hash of issue custom field values extracted from keywords in the email body
  def custom_field_values_from_keywords: (untyped customized) -> untyped

  def lookup_case_insensitive_key: (untyped scope, untyped attribute, ?untyped column_name) -> (untyped | nil)

  # Returns the text/plain part of the email
  # If not found (eg. HTML-only email), returns the body with tags removed
  def plain_text_body: () -> untyped

  def cleaned_up_text_body: () -> untyped

  def self.full_sanitizer: () -> untyped

  def allow_override_option: (untyped options) -> untyped

  # Removes the email body of text after the truncation configurations.
  def cleanup_body: (untyped body) -> untyped

  def ignored_filenames: () -> untyped

  def ignored_filename?: (untyped filename) -> untyped

  def create_work_package: (untyped project) -> untyped

  def collect_wp_attributes_from_email_on_create: (untyped work_package) -> untyped

  def update_work_package: (untyped work_package) -> untyped

  def collect_wp_attributes_from_email_on_update: (untyped work_package) -> untyped

  def wp_type_from_keywords: (untyped work_package) -> untyped

  def wp_status_from_keywords: () -> untyped

  def wp_parent_from_keywords: () -> untyped

  def wp_priority_from_keywords: () -> untyped

  def wp_category_from_keywords: (untyped work_package) -> untyped

  def wp_assignee_from_keywords: (untyped work_package) -> (nil | untyped)

  def wp_version_from_keywords: (untyped work_package) -> untyped

  def wp_start_date_from_keywords: () -> untyped

  def wp_due_date_from_keywords: () -> untyped

  def wp_estimated_hours_from_keywords: () -> untyped

  def wp_done_ratio_from_keyword: () -> untyped

  def log: (untyped message, ?::Symbol level, ?report: bool) -> untyped

  def report_errors: () -> (nil | untyped)

  def mail_as_hash: (untyped email) -> { message_id: untyped, subject: untyped, from: untyped, quote: untyped, text: untyped }

  def incoming_email_text: (untyped mail) -> untyped

  def incoming_email_quote: (untyped mail) -> ::String

  def work_package_create_contract_class: () -> untyped

  def work_package_update_contract_class: () -> untyped

  class UpdateWorkPackageWithoutAuthorizationsContract < WorkPackages::UpdateContract
    include WorkPackages::SkipAuthorizationChecks
  end

  class CreateWorkPackageWithoutAuthorizationsContract < WorkPackages::CreateContract
    include WorkPackages::SkipAuthorizationChecks
  end
end
