# #############################################################################
# The base activity provider class provides a default implementation for the  #
# most common activity jobs. You may implement the following methods to set   #
# the respective activity details:                                            #
#  - event_name                                                               #
#  - event_title                                                              #
#  - event_type                                                               #
#  - event_description                                                        #
#  - event_datetime                                                           #
#  - event_path                                                               #
#  - event_url                                                                #
#                                                                             #
# See the comments on the methods to get additional information.              #
# #############################################################################
class Activities::BaseActivityProvider
  include I18n

  include Redmine::I18n

  include OpenProject::StaticRouting

  # Returns events of type event_type visible by user that occurred between from and to
  def self.find_events: (untyped event_type, untyped user, untyped from, untyped to, untyped options) -> untyped

  def initialize: (untyped activity) -> void

  def self.activity_provider_for: (?::Hash[untyped, untyped] options) -> untyped

  def find_events: (untyped user, untyped from, untyped to, untyped options) -> untyped

  def fill_events: (untyped events_query) -> untyped

  # ###########################################################################
  # Activities may need information not available in the journal table. Thus, #
  # if you need further information from different tables (e.g., projects     #
  # table) you may extend the query in this method.                           #
  # ###########################################################################
  def extend_event_query: (untyped query) -> untyped

  # ###########################################################################
  # This method returns a list of columns that the activity query needs to    #
  # return, so the activity provider can actually create an activity object.  #
  # You must at least return the column containing the project reference with #
  # the alias 'project_id'.                                                   #
  # ###########################################################################
  def event_query_projection: () -> ::Array[untyped]

  def event_datetime: (untyped event) -> untyped

  def event_type: (untyped _event_data) -> untyped

  # ###########################################################################
  # Override this method if the journal table does not contain a reference to #
  # the 'projects' table.                                                     #
  # ###########################################################################
  def projects_reference_table: () -> untyped

  # ###########################################################################
  # Override this method if the project reference field in the projects       #
  # reference table is different from 'project_id'                            #
  # ###########################################################################
  def project_id_reference_field: () -> "project_id"

  def activitied_type: () -> untyped

  def event_selection_query: (untyped user, untyped from, untyped to, untyped options) -> untyped

  def apply_event_projection: (untyped query) -> untyped

  def apply_limit: (untyped query, untyped options) -> untyped

  def filter_for_event_datetime: (untyped query, untyped from, untyped to) -> untyped

  def apply_order: (untyped query) -> untyped

  def event_params: (untyped event_data) -> untyped

  def event_projection: () -> untyped

  def restrict_user: (untyped query, untyped options) -> untyped

  def restrict_projects: (untyped query, untyped user, untyped options) -> untyped

  def restrict_projects_query: (untyped user, untyped options) -> untyped

  def restrict_projects_by_selection: (untyped options, untyped query) -> untyped

  def restrict_projects_by_activity_module: (untyped query) -> untyped

  def restrict_projects_by_permission: (untyped query, untyped user) -> untyped

  attr_accessor activity: untyped

  def journals_with_data_query: () -> untyped

  def join_activity_journals_table: (untyped query) -> untyped

  def journals_table: () -> untyped

  def activitied_table: () -> untyped

  def projects_table: () -> untyped

  def enabled_modules_table: () -> untyped

  def activity_journals_table: () -> untyped

  def activity_journal_projection_statement: (untyped column, untyped name) -> untyped

  def projection_statement: (untyped table, untyped column, untyped name) -> untyped

  def event_name: (untyped event) -> untyped

  def url_helpers: () -> untyped
end
