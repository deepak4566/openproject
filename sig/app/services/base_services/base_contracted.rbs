module BaseServices
  class BaseContracted < BaseCallable
    include Contracted

    include Shared::ServiceContext

    attr_reader user: untyped

    def initialize: (user: untyped, ?contract_class: untyped?, ?contract_options: ::Hash[untyped, untyped]) -> void

    #
    # Reference to a resource that we're servicing
    attr_accessor model: untyped

    #
    # Determine the type of context
    # this service is running in
    # e.g., within a resource lock or just executing as the given user
    def service_context: (send_notifications: untyped) { () -> untyped } -> untyped

    def perform: (?::Hash[untyped, untyped] params) -> untyped

    def extract: (untyped params, untyped attribute) -> ::Array[untyped]

    def validate_params: (untyped _params) -> untyped

    def before_perform: (*untyped) -> untyped

    def after_validate: (untyped _params, untyped contract_call) -> untyped

    def validate_contract: (untyped call) -> untyped

    def after_perform: (untyped call) -> untyped

    alias after_save after_perform

    def persist: (untyped call) -> untyped

    def default_contract_class: () -> untyped

    def namespace: () -> untyped
  end
end
