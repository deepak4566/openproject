#
# Implements a repository service for building checkout instructions if supported
class SCM::CheckoutInstructionsService
  attr_reader repository: untyped

  attr_reader user: untyped

  attr_reader path: untyped

  def initialize: (untyped repository, ?path: untyped?, ?user: untyped) -> void

  #
  # Retrieve the checkout URL using the repository vendor information
  # It may additionally set a path parameter, if the repository supports subtree checkout
  def checkout_url: (?bool with_path) -> untyped

  #
  # Returns the checkout command from SCM adapter
  # (e.g., `git clone`)
  def checkout_command: () -> untyped

  #
  # Returns the checkout base URL as defined in settings.
  def checkout_base_url: () -> untyped

  #
  # Returns the instructions defined in the settings.
  def instructions: () -> untyped

  #
  # Returns true when the checkout URL may target a subtree of the repository.
  def subtree_checkout?: () -> untyped

  #
  # Determines whether the checkout URL may be built, i.e. all information is available
  # This is the case when the base_url is set or the vendor doesn't use base URLs.
  def checkout_url_buildable?: () -> untyped

  #
  # Returns whether the repository supports showing checkout information
  # and has been configured for it.
  def available?: () -> untyped

  def checkout_enabled?: () -> untyped

  def supported_but_not_enabled?: () -> untyped

  #
  # Determines whether permissions for the given repository
  # are available.
  def manages_permissions?: () -> untyped

  #
  # Returns one of the following permission symbols for the given user
  #
  # - :readwrite: When user is allowed to read and commit (:commit_access)
  # - :read: When user is allowed to checkout the repository, but not commit (:browse_repository)
  # - :none: Otherwise
  #
  # Note that this information is only applicable when the repository is managed,
  # because otherwise OpenProject does not control the repository permissions.
  # Use +manages_permissions?+ to check whether this is the case.
  #
  def permission: () -> untyped

  #
  # Returns whether the given user may checkout the repository
  #
  # Note that this information is only applicable when the repository is managed,
  # because otherwise OpenProject does not control the repository permissions.
  # Use +manages_permissions?+ to check whether this is the case.
  def may_checkout?: () -> untyped

  #
  # Returns whether the given user may commit to the repository
  #
  # Note that this information is only applicable when the repository is managed,
  # because otherwise OpenProject does not control the repository permissions.
  # Use +manages_permissions?+ to check whether this is the case.
  def may_commit?: () -> untyped

  private

  def checkout_settings: () -> untyped
end
