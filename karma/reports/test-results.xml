<?xml version="1.0"?>
<testsuites>
  <testsuite name="PhantomJS 1.9.7 (Linux)" package="" timestamp="2014-04-15T09:47:45" id="0" hostname="mtakac-ThinkPad-T440s" tests="123" errors="0" failures="0" time="0.029">
    <properties>
      <property name="browser.fullName" value="Mozilla/5.0 (Unknown; Linux x86_64) AppleWebKit/534.34 (KHTML, like Gecko) PhantomJS/1.9.7 Safari/534.34"/>
    </properties>
    <testcase name="should exist" time="0.003" classname="PhantomJS 1.9.7 (Linux).TimelinesController"/>
    <testcase name="should render a surrounding span" time="0" classname="PhantomJS 1.9.7 (Linux).accessibleCheckbox Directive element"/>
    <testcase name="should render a label" time="0.001" classname="PhantomJS 1.9.7 (Linux).accessibleCheckbox Directive element"/>
    <testcase name="should render a checkbox" time="0.001" classname="PhantomJS 1.9.7 (Linux).accessibleCheckbox Directive element"/>
    <testcase name="should render a span" time="0" classname="PhantomJS 1.9.7 (Linux).iconWrapper Directive element"/>
    <testcase name="should have a title attribute" time="0" classname="PhantomJS 1.9.7 (Linux).iconWrapper Directive element"/>
    <testcase name="should have a class based on its icon name" time="0.001" classname="PhantomJS 1.9.7 (Linux).iconWrapper Directive element"/>
    <testcase name="should should have an inner span" time="0" classname="PhantomJS 1.9.7 (Linux).iconWrapper Directive element"/>
    <testcase name="should preserve its div" time="0" classname="PhantomJS 1.9.7 (Linux).modal Directive element"/>
    <testcase name="should be clickable" time="0" classname="PhantomJS 1.9.7 (Linux).modal Directive element">
      <skipped/>
    </testcase>
    <testcase name="should render a div" time="0" classname="PhantomJS 1.9.7 (Linux).progressBar Directive element"/>
    <testcase name="should have a legend attribute" time="0" classname="PhantomJS 1.9.7 (Linux).progressBar Directive element"/>
    <testcase name="should have an inner table cell with appropriate width" time="0.001" classname="PhantomJS 1.9.7 (Linux).progressBar Directive element"/>
    <testcase name="should preserve its div" time="0" classname="PhantomJS 1.9.7 (Linux).slideToggle Directive element"/>
    <testcase name="should be in a collapsed state" time="0.001" classname="PhantomJS 1.9.7 (Linux).slideToggle Directive element"/>
    <testcase name="should toggle" time="0" classname="PhantomJS 1.9.7 (Linux).slideToggle Directive element">
      <skipped/>
    </testcase>
    <testcase name="should render perPage options" time="0.001" classname="PhantomJS 1.9.7 (Linux).tablePagination Directive element"/>
    <testcase name="should render a div" time="0" classname="PhantomJS 1.9.7 (Linux).toggledMultiselect Directive element"/>
    <testcase name="should render two SELECTs, one of which are hidden by default" time="0" classname="PhantomJS 1.9.7 (Linux).toggledMultiselect Directive element"/>
    <testcase name="should render two OPTIONs for displayed SELECT" time="0" classname="PhantomJS 1.9.7 (Linux).toggledMultiselect Directive element"/>
    <testcase name="should render a link that toggles multi-select" time="0" classname="PhantomJS 1.9.7 (Linux).toggledMultiselect Directive element">
      <skipped/>
    </testcase>
    <testcase name="should emit a div" time="0" classname="PhantomJS 1.9.7 (Linux).zoomSlider Directive element">
      <skipped/>
    </testcase>
    <testcase name="should be defined" time="0.001" classname="PhantomJS 1.9.7 (Linux).Work package filters remainingFilterNames"/>
    <testcase name="should return the names of the remaining filters" time="0.001" classname="PhantomJS 1.9.7 (Linux).Work package filters remainingFilterNames"/>
    <testcase name="respects the alphabetical locale ordering" time="0.002" classname="PhantomJS 1.9.7 (Linux).Work package filters remainingFilterNames when there are filter locales for the remaining filters"/>
    <testcase name="should exist" time="0" classname="PhantomJS 1.9.7 (Linux).Filter"/>
    <testcase name="should be a constructor function" time="0" classname="PhantomJS 1.9.7 (Linux).Filter"/>
    <testcase name="should be serializable to params" time="0" classname="PhantomJS 1.9.7 (Linux).Filter"/>
    <testcase name="is considered to be configured" time="0" classname="PhantomJS 1.9.7 (Linux).Filter when it is a single input filter and the text value is set"/>
    <testcase name="should serialize the text value" time="0" classname="PhantomJS 1.9.7 (Linux).Filter when it is a single input filter and the text value is set"/>
    <testcase name="should exist" time="0" classname="PhantomJS 1.9.7 (Linux).Query"/>
    <testcase name="should be a constructor function" time="0" classname="PhantomJS 1.9.7 (Linux).Query"/>
    <testcase name="should augment filters with meta data when set via setFilters" time="0" classname="PhantomJS 1.9.7 (Linux).Query adding filters"/>
    <testcase name="should augment filters with meta data when set via addFilter" time="0.001" classname="PhantomJS 1.9.7 (Linux).Query adding filters"/>
    <testcase name="should exist" time="0" classname="PhantomJS 1.9.7 (Linux).Sortation"/>
    <testcase name="should be a constructor function" time="0" classname="PhantomJS 1.9.7 (Linux).Sortation"/>
    <testcase name="should exist" time="0" classname="PhantomJS 1.9.7 (Linux).Timeline"/>
    <testcase name="should not create a timeline object without configuration options" time="0" classname="PhantomJS 1.9.7 (Linux).Timeline"/>
    <testcase name="should create a timeline object" time="0" classname="PhantomJS 1.9.7 (Linux).Timeline"/>
    <testcase name="should exist" time="0" classname="PhantomJS 1.9.7 (Linux).User"/>
    <testcase name="should return true for pes" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element is"/>
    <testcase name="should return false for non-pes" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element is"/>
    <testcase name="should return sorted children" time="0.001" classname="PhantomJS 1.9.7 (Linux).Planning Element children getChildren"/>
    <testcase name="should return empty list" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element children getChildren"/>
    <testcase name="orders work packages by name if start and due dates are equal" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element children getChildren when start and due dates are specified"/>
    <testcase name="shows work packages with earlier start dates first" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element children getChildren when start and due dates are specified">
      <skipped/>
    </testcase>
    <testcase name="shows work packages with sooner due dates first if start dates are equal" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element children getChildren when start and due dates are specified">
      <skipped/>
    </testcase>
    <testcase name="should return false for hasChildren if children list undefined" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element children hasChildren"/>
    <testcase name="should return false for hasChildren if children list empty" time="0.001" classname="PhantomJS 1.9.7 (Linux).Planning Element children hasChildren"/>
    <testcase name="should return true for hasChildren if children exist" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element children hasChildren"/>
    <testcase name="should always return false" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element hide"/>
    <testcase name="should be null by default" time="0.001" classname="PhantomJS 1.9.7 (Linux).Planning Element getProject"/>
    <testcase name="should be the set project otherwise" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element getProject"/>
    <testcase name="should only be filtered if project is filtered" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element filtered out">
      <skipped/>
    </testcase>
    <testcase name="should cache the result even if filter changes" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element filtered out">
      <skipped/>
    </testcase>
    <testcase name="should be null by default" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element responsible"/>
    <testcase name="should get the responsible" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element responsible">
      <skipped/>
    </testcase>
    <testcase name="should allow get of responsible name" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element responsible">
      <skipped/>
    </testcase>
    <testcase name="should return undefined if responsible or responsible name are not set" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element responsible">
      <skipped/>
    </testcase>
    <testcase name="should be undefined by default" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element assignee name"/>
    <testcase name="should allow get of assignee name" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element assignee name"/>
    <testcase name="should return undefined if invalid assigned to object" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element assignee name"/>
    <testcase name="empty should have no historical" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element historical"/>
    <testcase name="empty should have no alternate dates" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element historical"/>
    <testcase name="historical should have correct alternate dates" time="0.001" classname="PhantomJS 1.9.7 (Linux).Planning Element historical"/>
    <testcase name="should return object value of object.parameter" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element getAttribute"/>
    <testcase name="should return function value of object.parameter" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element getAttribute"/>
    <testcase name="should return 0 for x and width if no start&amp;end date" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element horizontalBoundsForDates"/>
    <testcase name="should return zero x if beginning and start are the same" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element horizontalBoundsForDates"/>
    <testcase name="should return width of 1 day if start and end are equal" time="0.001" classname="PhantomJS 1.9.7 (Linux).Planning Element horizontalBoundsForDates"/>
    <testcase name="should return width of difference+1 if start and end are not the same" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element horizontalBoundsForDates"/>
    <testcase name="should multiply with scale" time="0.001" classname="PhantomJS 1.9.7 (Linux).Planning Element horizontalBoundsForDates"/>
    <testcase name="if one date is not set width equals 3 days" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element horizontalBoundsForDates"/>
    <testcase name="should return x and width if end is not set" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element horizontalBoundsForDates"/>
    <testcase name="should return the middle for a milestone" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element horizontalBoundsForDates">
      <skipped/>
    </testcase>
    <testcase name="should return correct url" time="0.001" classname="PhantomJS 1.9.7 (Linux).Planning Element url"/>
    <testcase name="should return color of pe type if existing" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element color">
      <skipped/>
    </testcase>
    <testcase name="should return parent color if pe has children" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element color">
      <skipped/>
    </testcase>
    <testcase name="should return default color for empty pe" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element color">
      <skipped/>
    </testcase>
    <testcase name="should return gradient if one date is missing" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element color">
      <skipped/>
    </testcase>
    <testcase name="should return date object" time="0.001" classname="PhantomJS 1.9.7 (Linux).Planning Element start() and end()"/>
    <testcase name="should return correct date" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element start() and end()"/>
    <testcase name="should return undefined for no date" time="0.001" classname="PhantomJS 1.9.7 (Linux).Planning Element start() and end()"/>
    <testcase name="should return end date for start() if no end date is set and is milestone" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element start() and end()">
      <skipped/>
    </testcase>
    <testcase name="should return start date for end() if no start date is set and is milestone" time="0" classname="PhantomJS 1.9.7 (Linux).Planning Element start() and end()">
      <skipped/>
    </testcase>
    <testcase name="should be true for empty" time="0" classname="PhantomJS 1.9.7 (Linux).Project hidden"/>
    <testcase name="should be false by default" time="0" classname="PhantomJS 1.9.7 (Linux).Project filtered"/>
    <testcase name="should be filtered for type" time="0" classname="PhantomJS 1.9.7 (Linux).Project filtered">
      <skipped/>
    </testcase>
    <testcase name="should be filtered for status" time="0" classname="PhantomJS 1.9.7 (Linux).Project filtered">
      <skipped/>
    </testcase>
    <testcase name="should be empty by default" time="0" classname="PhantomJS 1.9.7 (Linux).Project getPlanningElements"/>
    <testcase name="should return list of planningElements when set" time="0.001" classname="PhantomJS 1.9.7 (Linux).Project getPlanningElements"/>
    <testcase name="should sort without date to the beginning" time="0.001" classname="PhantomJS 1.9.7 (Linux).Project getPlanningElements"/>
    <testcase name="should sort with only an end date as if it had a start date equal to the end date" time="0" classname="PhantomJS 1.9.7 (Linux).Project getPlanningElements"/>
    <testcase name="should sort by date per default" time="0.001" classname="PhantomJS 1.9.7 (Linux).Project getPlanningElements"/>
    <testcase name="should sort pes with same start by end" time="0" classname="PhantomJS 1.9.7 (Linux).Project getPlanningElements"/>
    <testcase name="should sort pes with same start and end by name" time="0" classname="PhantomJS 1.9.7 (Linux).Project getPlanningElements"/>
    <testcase name="should sort pes with same start and end and name by id" time="0" classname="PhantomJS 1.9.7 (Linux).Project getPlanningElements"/>
    <testcase name="should be null by default" time="0" classname="PhantomJS 1.9.7 (Linux).Project responsible"/>
    <testcase name="should get the responsible" time="0" classname="PhantomJS 1.9.7 (Linux).Project responsible"/>
    <testcase name="should allow get of responsible name" time="0" classname="PhantomJS 1.9.7 (Linux).Project responsible"/>
    <testcase name="should return undefined if responsible or responsible name are not set" time="0" classname="PhantomJS 1.9.7 (Linux).Project responsible"/>
    <testcase name="should always return undefined" time="0" classname="PhantomJS 1.9.7 (Linux).Project assignee"/>
    <testcase name="should return null if no reporting" time="0.001" classname="PhantomJS 1.9.7 (Linux).Project status"/>
    <testcase name="should return reporting status" time="0" classname="PhantomJS 1.9.7 (Linux).Project status">
      <skipped/>
    </testcase>
    <testcase name="returns pes before reporters" time="0" classname="PhantomJS 1.9.7 (Linux).Project subElements">
      <skipped/>
    </testcase>
    <testcase name="returns the same pes as getPlanningElements" time="0" classname="PhantomJS 1.9.7 (Linux).Project subElements">
      <skipped/>
    </testcase>
    <testcase name="filters the reporters correctly" time="0" classname="PhantomJS 1.9.7 (Linux).Project subElements">
      <skipped/>
    </testcase>
    <testcase name="should return reporters" time="0.001" classname="PhantomJS 1.9.7 (Linux).Project Reporters"/>
    <testcase name="should sort without date to the beginning" time="0.001" classname="PhantomJS 1.9.7 (Linux).Project Reporters"/>
    <testcase name="should sort by date" time="0" classname="PhantomJS 1.9.7 (Linux).Project Reporters"/>
    <testcase name="should sort with same start and end by name" time="0" classname="PhantomJS 1.9.7 (Linux).Project Reporters"/>
    <testcase name="should sort with same start and end and name by id" time="0" classname="PhantomJS 1.9.7 (Linux).Project Reporters"/>
    <testcase name="should sort groups by name" time="0" classname="PhantomJS 1.9.7 (Linux).Project Reporters groups"/>
    <testcase name="should sort groups by explicit order if given" time="0" classname="PhantomJS 1.9.7 (Linux).Project Reporters groups"/>
    <testcase name="should return null if no parent given" time="0" classname="PhantomJS 1.9.7 (Linux).Project Parent">
      <skipped/>
    </testcase>
    <testcase name="should return the correct parent" time="0" classname="PhantomJS 1.9.7 (Linux).Project Parent">
      <skipped/>
    </testcase>
    <testcase name="should return the correct url" time="0" classname="PhantomJS 1.9.7 (Linux).Project Url">
      <skipped/>
    </testcase>
    <testcase name="should return true if element in array" time="0" classname="PhantomJS 1.9.7 (Linux).Helper Functions id in Array"/>
    <testcase name="should return true if no array or empty array is passed" time="0" classname="PhantomJS 1.9.7 (Linux).Helper Functions id in Array"/>
    <testcase name="should set query.groupBy" time="0" classname="PhantomJS 1.9.7 (Linux).QueryService query setup"/>
    <testcase name="should set query.displaySums" time="0" classname="PhantomJS 1.9.7 (Linux).QueryService query setup"/>
    <testcase name="should load the available filters" time="0" classname="PhantomJS 1.9.7 (Linux).QueryService query setup filters">
      <skipped/>
    </testcase>
    <testcase name="should assign filters to the query" time="0" classname="PhantomJS 1.9.7 (Linux).QueryService query setup filters">
      <skipped/>
    </testcase>
    <system-out><![CDATA[
]]></system-out>
    <system-err/>
  </testsuite>
  <testsuite name="Firefox 28.0.0 (Ubuntu)" package="" timestamp="2014-04-15T09:47:46" id="0" hostname="mtakac-ThinkPad-T440s" tests="123" errors="0" failures="0" time="0.024">
    <properties>
      <property name="browser.fullName" value="Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:28.0) Gecko/20100101 Firefox/28.0"/>
    </properties>
    <testcase name="should exist" time="0.003" classname="Firefox 28.0.0 (Ubuntu).TimelinesController"/>
    <testcase name="should render a surrounding span" time="0" classname="Firefox 28.0.0 (Ubuntu).accessibleCheckbox Directive element"/>
    <testcase name="should render a label" time="0" classname="Firefox 28.0.0 (Ubuntu).accessibleCheckbox Directive element"/>
    <testcase name="should render a checkbox" time="0" classname="Firefox 28.0.0 (Ubuntu).accessibleCheckbox Directive element"/>
    <testcase name="should render a span" time="0" classname="Firefox 28.0.0 (Ubuntu).iconWrapper Directive element"/>
    <testcase name="should have a title attribute" time="0" classname="Firefox 28.0.0 (Ubuntu).iconWrapper Directive element"/>
    <testcase name="should have a class based on its icon name" time="0.001" classname="Firefox 28.0.0 (Ubuntu).iconWrapper Directive element"/>
    <testcase name="should should have an inner span" time="0" classname="Firefox 28.0.0 (Ubuntu).iconWrapper Directive element"/>
    <testcase name="should preserve its div" time="0" classname="Firefox 28.0.0 (Ubuntu).modal Directive element"/>
    <testcase name="should be clickable" time="0" classname="Firefox 28.0.0 (Ubuntu).modal Directive element">
      <skipped/>
    </testcase>
    <testcase name="should render a div" time="0" classname="Firefox 28.0.0 (Ubuntu).progressBar Directive element"/>
    <testcase name="should have a legend attribute" time="0" classname="Firefox 28.0.0 (Ubuntu).progressBar Directive element"/>
    <testcase name="should have an inner table cell with appropriate width" time="0.001" classname="Firefox 28.0.0 (Ubuntu).progressBar Directive element"/>
    <testcase name="should preserve its div" time="0" classname="Firefox 28.0.0 (Ubuntu).slideToggle Directive element"/>
    <testcase name="should be in a collapsed state" time="0.001" classname="Firefox 28.0.0 (Ubuntu).slideToggle Directive element"/>
    <testcase name="should toggle" time="0" classname="Firefox 28.0.0 (Ubuntu).slideToggle Directive element">
      <skipped/>
    </testcase>
    <testcase name="should render perPage options" time="0.001" classname="Firefox 28.0.0 (Ubuntu).tablePagination Directive element"/>
    <testcase name="should render a div" time="0" classname="Firefox 28.0.0 (Ubuntu).toggledMultiselect Directive element"/>
    <testcase name="should render two SELECTs, one of which are hidden by default" time="0" classname="Firefox 28.0.0 (Ubuntu).toggledMultiselect Directive element"/>
    <testcase name="should render two OPTIONs for displayed SELECT" time="0" classname="Firefox 28.0.0 (Ubuntu).toggledMultiselect Directive element"/>
    <testcase name="should render a link that toggles multi-select" time="0" classname="Firefox 28.0.0 (Ubuntu).toggledMultiselect Directive element">
      <skipped/>
    </testcase>
    <testcase name="should emit a div" time="0" classname="Firefox 28.0.0 (Ubuntu).zoomSlider Directive element">
      <skipped/>
    </testcase>
    <testcase name="should be defined" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Work package filters remainingFilterNames"/>
    <testcase name="should return the names of the remaining filters" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Work package filters remainingFilterNames"/>
    <testcase name="respects the alphabetical locale ordering" time="0.002" classname="Firefox 28.0.0 (Ubuntu).Work package filters remainingFilterNames when there are filter locales for the remaining filters"/>
    <testcase name="should exist" time="0" classname="Firefox 28.0.0 (Ubuntu).Filter"/>
    <testcase name="should be a constructor function" time="0" classname="Firefox 28.0.0 (Ubuntu).Filter"/>
    <testcase name="should be serializable to params" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Filter"/>
    <testcase name="is considered to be configured" time="0" classname="Firefox 28.0.0 (Ubuntu).Filter when it is a single input filter and the text value is set"/>
    <testcase name="should serialize the text value" time="0" classname="Firefox 28.0.0 (Ubuntu).Filter when it is a single input filter and the text value is set"/>
    <testcase name="should exist" time="0" classname="Firefox 28.0.0 (Ubuntu).Query"/>
    <testcase name="should be a constructor function" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Query"/>
    <testcase name="should augment filters with meta data when set via setFilters" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Query adding filters"/>
    <testcase name="should augment filters with meta data when set via addFilter" time="0" classname="Firefox 28.0.0 (Ubuntu).Query adding filters"/>
    <testcase name="should exist" time="0" classname="Firefox 28.0.0 (Ubuntu).Sortation"/>
    <testcase name="should be a constructor function" time="0" classname="Firefox 28.0.0 (Ubuntu).Sortation"/>
    <testcase name="should exist" time="0" classname="Firefox 28.0.0 (Ubuntu).Timeline"/>
    <testcase name="should not create a timeline object without configuration options" time="0" classname="Firefox 28.0.0 (Ubuntu).Timeline"/>
    <testcase name="should create a timeline object" time="0" classname="Firefox 28.0.0 (Ubuntu).Timeline"/>
    <testcase name="should exist" time="0" classname="Firefox 28.0.0 (Ubuntu).User"/>
    <testcase name="should return true for pes" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element is"/>
    <testcase name="should return false for non-pes" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element is"/>
    <testcase name="should return sorted children" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element children getChildren"/>
    <testcase name="should return empty list" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element children getChildren"/>
    <testcase name="orders work packages by name if start and due dates are equal" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element children getChildren when start and due dates are specified"/>
    <testcase name="shows work packages with earlier start dates first" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element children getChildren when start and due dates are specified">
      <skipped/>
    </testcase>
    <testcase name="shows work packages with sooner due dates first if start dates are equal" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element children getChildren when start and due dates are specified">
      <skipped/>
    </testcase>
    <testcase name="should return false for hasChildren if children list undefined" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element children hasChildren"/>
    <testcase name="should return false for hasChildren if children list empty" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element children hasChildren"/>
    <testcase name="should return true for hasChildren if children exist" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Planning Element children hasChildren"/>
    <testcase name="should always return false" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Planning Element hide"/>
    <testcase name="should be null by default" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element getProject"/>
    <testcase name="should be the set project otherwise" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element getProject"/>
    <testcase name="should only be filtered if project is filtered" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element filtered out">
      <skipped/>
    </testcase>
    <testcase name="should cache the result even if filter changes" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element filtered out">
      <skipped/>
    </testcase>
    <testcase name="should be null by default" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element responsible"/>
    <testcase name="should get the responsible" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element responsible">
      <skipped/>
    </testcase>
    <testcase name="should allow get of responsible name" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element responsible">
      <skipped/>
    </testcase>
    <testcase name="should return undefined if responsible or responsible name are not set" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element responsible">
      <skipped/>
    </testcase>
    <testcase name="should be undefined by default" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element assignee name"/>
    <testcase name="should allow get of assignee name" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element assignee name"/>
    <testcase name="should return undefined if invalid assigned to object" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element assignee name"/>
    <testcase name="empty should have no historical" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element historical"/>
    <testcase name="empty should have no alternate dates" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element historical"/>
    <testcase name="historical should have correct alternate dates" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element historical"/>
    <testcase name="should return object value of object.parameter" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Planning Element getAttribute"/>
    <testcase name="should return function value of object.parameter" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element getAttribute"/>
    <testcase name="should return 0 for x and width if no start&amp;end date" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element horizontalBoundsForDates"/>
    <testcase name="should return zero x if beginning and start are the same" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element horizontalBoundsForDates"/>
    <testcase name="should return width of 1 day if start and end are equal" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element horizontalBoundsForDates"/>
    <testcase name="should return width of difference+1 if start and end are not the same" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element horizontalBoundsForDates"/>
    <testcase name="should multiply with scale" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element horizontalBoundsForDates"/>
    <testcase name="if one date is not set width equals 3 days" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element horizontalBoundsForDates"/>
    <testcase name="should return x and width if end is not set" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element horizontalBoundsForDates"/>
    <testcase name="should return the middle for a milestone" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element horizontalBoundsForDates">
      <skipped/>
    </testcase>
    <testcase name="should return correct url" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element url"/>
    <testcase name="should return color of pe type if existing" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element color">
      <skipped/>
    </testcase>
    <testcase name="should return parent color if pe has children" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element color">
      <skipped/>
    </testcase>
    <testcase name="should return default color for empty pe" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element color">
      <skipped/>
    </testcase>
    <testcase name="should return gradient if one date is missing" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element color">
      <skipped/>
    </testcase>
    <testcase name="should return date object" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Planning Element start() and end()"/>
    <testcase name="should return correct date" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element start() and end()"/>
    <testcase name="should return undefined for no date" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element start() and end()"/>
    <testcase name="should return end date for start() if no end date is set and is milestone" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element start() and end()">
      <skipped/>
    </testcase>
    <testcase name="should return start date for end() if no start date is set and is milestone" time="0" classname="Firefox 28.0.0 (Ubuntu).Planning Element start() and end()">
      <skipped/>
    </testcase>
    <testcase name="should be true for empty" time="0" classname="Firefox 28.0.0 (Ubuntu).Project hidden"/>
    <testcase name="should be false by default" time="0" classname="Firefox 28.0.0 (Ubuntu).Project filtered"/>
    <testcase name="should be filtered for type" time="0" classname="Firefox 28.0.0 (Ubuntu).Project filtered">
      <skipped/>
    </testcase>
    <testcase name="should be filtered for status" time="0" classname="Firefox 28.0.0 (Ubuntu).Project filtered">
      <skipped/>
    </testcase>
    <testcase name="should be empty by default" time="0" classname="Firefox 28.0.0 (Ubuntu).Project getPlanningElements"/>
    <testcase name="should return list of planningElements when set" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Project getPlanningElements"/>
    <testcase name="should sort without date to the beginning" time="0" classname="Firefox 28.0.0 (Ubuntu).Project getPlanningElements"/>
    <testcase name="should sort with only an end date as if it had a start date equal to the end date" time="0" classname="Firefox 28.0.0 (Ubuntu).Project getPlanningElements"/>
    <testcase name="should sort by date per default" time="0" classname="Firefox 28.0.0 (Ubuntu).Project getPlanningElements"/>
    <testcase name="should sort pes with same start by end" time="0" classname="Firefox 28.0.0 (Ubuntu).Project getPlanningElements"/>
    <testcase name="should sort pes with same start and end by name" time="0" classname="Firefox 28.0.0 (Ubuntu).Project getPlanningElements"/>
    <testcase name="should sort pes with same start and end and name by id" time="0" classname="Firefox 28.0.0 (Ubuntu).Project getPlanningElements"/>
    <testcase name="should be null by default" time="0" classname="Firefox 28.0.0 (Ubuntu).Project responsible"/>
    <testcase name="should get the responsible" time="0" classname="Firefox 28.0.0 (Ubuntu).Project responsible"/>
    <testcase name="should allow get of responsible name" time="0" classname="Firefox 28.0.0 (Ubuntu).Project responsible"/>
    <testcase name="should return undefined if responsible or responsible name are not set" time="0" classname="Firefox 28.0.0 (Ubuntu).Project responsible"/>
    <testcase name="should always return undefined" time="0" classname="Firefox 28.0.0 (Ubuntu).Project assignee"/>
    <testcase name="should return null if no reporting" time="0" classname="Firefox 28.0.0 (Ubuntu).Project status"/>
    <testcase name="should return reporting status" time="0" classname="Firefox 28.0.0 (Ubuntu).Project status">
      <skipped/>
    </testcase>
    <testcase name="returns pes before reporters" time="0" classname="Firefox 28.0.0 (Ubuntu).Project subElements">
      <skipped/>
    </testcase>
    <testcase name="returns the same pes as getPlanningElements" time="0" classname="Firefox 28.0.0 (Ubuntu).Project subElements">
      <skipped/>
    </testcase>
    <testcase name="filters the reporters correctly" time="0" classname="Firefox 28.0.0 (Ubuntu).Project subElements">
      <skipped/>
    </testcase>
    <testcase name="should return reporters" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Project Reporters"/>
    <testcase name="should sort without date to the beginning" time="0" classname="Firefox 28.0.0 (Ubuntu).Project Reporters"/>
    <testcase name="should sort by date" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Project Reporters"/>
    <testcase name="should sort with same start and end by name" time="0" classname="Firefox 28.0.0 (Ubuntu).Project Reporters"/>
    <testcase name="should sort with same start and end and name by id" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Project Reporters"/>
    <testcase name="should sort groups by name" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Project Reporters groups"/>
    <testcase name="should sort groups by explicit order if given" time="0.001" classname="Firefox 28.0.0 (Ubuntu).Project Reporters groups"/>
    <testcase name="should return null if no parent given" time="0" classname="Firefox 28.0.0 (Ubuntu).Project Parent">
      <skipped/>
    </testcase>
    <testcase name="should return the correct parent" time="0" classname="Firefox 28.0.0 (Ubuntu).Project Parent">
      <skipped/>
    </testcase>
    <testcase name="should return the correct url" time="0" classname="Firefox 28.0.0 (Ubuntu).Project Url">
      <skipped/>
    </testcase>
    <testcase name="should return true if element in array" time="0" classname="Firefox 28.0.0 (Ubuntu).Helper Functions id in Array"/>
    <testcase name="should return true if no array or empty array is passed" time="0" classname="Firefox 28.0.0 (Ubuntu).Helper Functions id in Array"/>
    <testcase name="should set query.groupBy" time="0" classname="Firefox 28.0.0 (Ubuntu).QueryService query setup"/>
    <testcase name="should set query.displaySums" time="0" classname="Firefox 28.0.0 (Ubuntu).QueryService query setup"/>
    <testcase name="should load the available filters" time="0" classname="Firefox 28.0.0 (Ubuntu).QueryService query setup filters">
      <skipped/>
    </testcase>
    <testcase name="should assign filters to the query" time="0" classname="Firefox 28.0.0 (Ubuntu).QueryService query setup filters">
      <skipped/>
    </testcase>
    <system-out><![CDATA[
]]></system-out>
    <system-err/>
  </testsuite>
</testsuites>
